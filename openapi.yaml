components:
  requestBodies:
    PreflightRequest:
      content:
        application/json:
          schema:
            properties:
              namespace_name:
                type: string
            required:
              - namespace_name
            type: object
  responses:
    default:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Default error response
  schemas:
    AccessDetails:
      properties:
        generation_allowed:
          type: boolean
        level:
          enum:
            - allowed
            - warning
            - blocked
          type: string
        message:
          type: string
      required:
        - generation_allowed
        - message
      type: object
    AccessToken:
      description: An AccessToken is a token that can be used to authenticate with the Speakeasy API.
      properties:
        access_token:
          type: string
        claims:
          type: object
        feature_flags:
          items:
            $ref: '#/components/schemas/FeatureFlag'
          type: array
        user:
          properties:
            admin:
              type: boolean
            created_at:
              format: date-time
              type: string
            display_name:
              type: string
            email:
              type: string
            email_verified:
              type: boolean
            id:
              type: string
          type: object
        workspaces:
          items:
            properties:
              account_type:
                enum:
                  - free
                  - scale-up
                  - enterprise
                type: string
              id:
                type: string
              name:
                type: string
              updated_at:
                format: date-time
                type: string
            type: object
          type: array
      required:
        - access_token
        - claims
        - user
      type: object
    AddTags:
      description: Request body of tags to add to a revision
      properties:
        revision_digest:
          description: revision digest to add tags too sha256:...
          type: string
        tags:
          description: string tags to add to the revision
          items:
            type: string
          type: array
      required:
        - revision_digest
        - tags
      type: object
    Annotations:
      description: Annotations
      properties:
        org.opencontainers.image.authors:
          description: The authors of the image
          type: string
        org.opencontainers.image.created:
          description: The time the image was created
          type: string
        org.opencontainers.image.description:
          description: Human-readable description of the software packaged in the image
          type: string
        org.opencontainers.image.documentation:
          description: The documentation URL of the image
          type: string
        org.opencontainers.image.licenses:
          type: string
        org.opencontainers.image.ref.name:
          description: Name of the reference for a target
          type: string
        org.opencontainers.image.revision:
          description: Source control revision identifier
          type: string
        org.opencontainers.image.source:
          description: The URL to get source code for building the image
          type: string
        org.opencontainers.image.title:
          description: Human-readable title of the image
          type: string
        org.opencontainers.image.url:
          description: The URL of the image
          type: string
        org.opencontainers.image.vendor:
          description: Name of the distributing entity, organization or individual.
          type: string
        org.opencontainers.image.version:
          description: The version of the packaged software
          type: string
    Api:
      description: An Api is representation of a API (a collection of API Endpoints) within the Speakeasy Platform.
      properties:
        api_id:
          description: The ID of this Api. This is a human-readable name (subject to change).
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        description:
          description: A detailed description of the Api.
          type: string
        matched:
          description: Determines if all the endpoints within the Api are found in the OpenAPI spec associated with the Api.
          readOnly: true
          type: boolean
        meta_data:
          additionalProperties:
            items:
              type: string
            type: array
          description: A set of values associated with a meta_data key. This field is only set on get requests.
          type: object
        updated_at:
          description: Last update timestamp.
          format: date-time
          readOnly: true
          type: string
        version_id:
          description: The version ID of this Api. This is semantic version identifier.
          type: string
        workspace_id:
          description: The workspace ID this Api belongs to.
          readOnly: true
          type: string
      required:
        - api_id
        - created_at
        - description
        - updated_at
        - version_id
        - workspace_id
      type: object
    ApiEndpoint:
      description: An ApiEndpoint is a description of an Endpoint for an API.
      properties:
        api_endpoint_id:
          description: The ID of this ApiEndpoint. This is a hash of the method and path.
          type: string
        api_id:
          description: The ID of the Api this ApiEndpoint belongs to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        description:
          description: A detailed description of the ApiEndpoint.
          type: string
        display_name:
          description: A human-readable name for the ApiEndpoint.
          type: string
        matched:
          description: Determines if the endpoint was found in the OpenAPI spec associated with the parent Api.
          readOnly: true
          type: boolean
        method:
          description: HTTP verb.
          type: string
        path:
          description: Path that handles this Api.
          type: string
        updated_at:
          description: Last update timestamp.
          format: date-time
          readOnly: true
          type: string
        version_id:
          description: The version ID of the Api this ApiEndpoint belongs to.
          type: string
        workspace_id:
          description: The workspace ID this ApiEndpoint belongs to.
          readOnly: true
          type: string
      required:
        - api_endpoint_id
        - api_id
        - created_at
        - description
        - display_name
        - method
        - path
        - updated_at
        - version_id
        - workspace_id
      type: object
    ApiKeyDetails:
      properties:
        account_type:
          enum:
            - free
            - scale-up
            - enterprise
          type: string
        enabled_features:
          items:
            type: string
          type: array
        feature_flags:
          deprecated: true
          items:
            type: string
          type: array
        generation_access_unlimited:
          type: boolean
        org_slug:
          type: string
        telemetry_disabled:
          type: boolean
        workspace_id:
          type: string
        workspace_slug:
          type: string
      required:
        - workspace_id
        - account_type
        - enabled_features
        - workspace_slug
        - org_slug
        - telemetry_disabled
      type: object
    BoundedRequest:
      description: A BoundedRequest is a request that has been logged by the Speakeasy without the contents of the request.
      properties:
        api_endpoint_id:
          description: The ID of the ApiEndpoint this request was made to.
          readOnly: true
          type: string
        api_id:
          description: The ID of the Api this request was made to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        customer_id:
          description: The ID of the customer that made this request.
          readOnly: true
          type: string
        latency:
          description: The latency of the request.
          readOnly: true
          type: integer
        metadata:
          description: Metadata associated with this request
          items:
            $ref: '#/components/schemas/RequestMetadata'
          readOnly: true
          type: array
        method:
          description: HTTP verb.
          readOnly: true
          type: string
        path:
          description: The path of the request.
          readOnly: true
          type: string
        request_finish_time:
          description: The time the request finished.
          format: date-time
          readOnly: true
          type: string
        request_id:
          description: The ID of this request.
          readOnly: true
          type: string
        request_start_time:
          description: The time the request was made.
          format: date-time
          readOnly: true
          type: string
        status:
          description: The status code of the request.
          readOnly: true
          type: integer
        version_id:
          description: The version ID of the Api this request was made to.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this request was made to.
          readOnly: true
          type: string
      required:
        - api_endpoint_id
        - api_id
        - created_at
        - customer_id
        - latency
        - method
        - path
        - request_finish_time
        - request_id
        - request_start_time
        - status
        - version_id
        - workspace_id
      type: object
    CliEvent:
      properties:
        commit_head:
          description: Remote commit ID.
          type: string
        continuous_integration_environment:
          description: Name of the CI environment.
          type: string
        created_at:
          description: Timestamp when the event was created in the database.
          format: date-time
          type: string
        duration_ms:
          description: Duration of the event in milliseconds.
          type: integer
        error:
          description: Error message if the event was not successful.
          type: string
        execution_id:
          description: Unique identifier for each execution of the CLI.
          type: string
        generate_bump_type:
          description: Bump type of the lock file (calculated semver delta, or a custom change (manual release))
          enum:
            - major
            - minor
            - patch
            - custom
            - none
          type: string
        generate_config_post_checksum:
          description: Checksum of the configuration file (post generation)
          type: string
        generate_config_post_raw:
          description: Rendered configuration file (post generation)
          type: string
        generate_config_post_version:
          description: The version of the customer's SDK that we just generated
          type: string
        generate_config_pre_checksum:
          description: Checksum of the configuration file (prior to generation)
          type: string
        generate_config_pre_raw:
          description: Rendered configuration file (prior to generation)
          type: string
        generate_config_pre_version:
          description: The version of the customer's SDK before we generated
          type: string
        generate_eligible_features:
          description: Eligible feature set during generation
          type: string
        generate_gen_lock_id:
          description: gen.lock ID (expected to be a uuid).
          type: string
        generate_gen_lock_post_features:
          description: Features post generation
          type: string
        generate_gen_lock_pre_blob_digest:
          description: Blob digest of the Previous Generation
          type: string
        generate_gen_lock_pre_doc_checksum:
          description: Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
          type: string
        generate_gen_lock_pre_doc_version:
          description: info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
          type: string
        generate_gen_lock_pre_features:
          description: Features prior to generation
          type: string
        generate_gen_lock_pre_namespace_name:
          description: Namespace name of the Previous Generation
          type: string
        generate_gen_lock_pre_revision_digest:
          description: Revision digest of the Previous Generation
          type: string
        generate_gen_lock_pre_version:
          description: Artifact version for the Previous Generation
          type: string
        generate_number_of_operations_ignored:
          description: The number of operations ignored in generation.
          type: integer
        generate_number_of_operations_used:
          description: The number of operations used in generation.
          type: integer
        generate_output_tests:
          description: Indicates whether tests were output.
          type: boolean
        generate_published:
          description: Indicates whether the target was considered published.
          type: boolean
        generate_repo_url:
          description: Expected Repo URL, for use in documentation generation.
          type: string
        generate_target:
          description: The target of the event.
          type: string
        generate_target_name:
          description: The workflow name of the target.
          type: string
        generate_target_version:
          description: The version of the target.
          type: string
        generate_version:
          description: Version of the generation logic used.
          type: string
        gh_action_organization:
          description: GitHub organization of the action.
          type: string
        gh_action_ref:
          description: GitHub Action ref value.
          type: string
        gh_action_repository:
          description: GitHub repository of the action.
          type: string
        gh_action_run_link:
          description: Link to the GitHub action run.
          type: string
        gh_action_version:
          description: Version of the GitHub action.
          type: string
        git_relative_cwd:
          description: Current working directory relative to the git root.
          type: string
        git_remote_default_owner:
          description: Default owner for git remote.
          type: string
        git_remote_default_repo:
          description: Default repository name for git remote.
          type: string
        git_user_email:
          description: User email from git configuration.
          type: string
        git_user_name:
          description: User's name from git configuration. (not GitHub username)
          type: string
        hostname:
          description: Remote hostname.
          type: string
        id:
          description: Unique identifier for each event.
          type: string
        interaction_type:
          $ref: '#/components/schemas/InteractionType'
          description: Type of interaction.
        last_step:
          description: The last step of the event.
          type: string
        lint_report_digest:
          description: The checksum of the lint report.
          type: string
        lint_report_error_count:
          description: The number of errors in the lint report.
          type: integer
        lint_report_info_count:
          description: The number of info messages in the lint report.
          type: integer
        lint_report_warning_count:
          description: The number of warnings in the lint report.
          type: integer
        local_completed_at:
          description: Timestamp when the event completed, in local time.
          format: date-time
          type: string
        local_started_at:
          description: Timestamp when the event started, in local time.
          format: date-time
          type: string
        management_doc_checksum:
          description: Checksum of the currently Rendered OpenAPI document.
          type: string
        management_doc_version:
          description: Version taken from info.version field of the Rendered OpenAPI document.
          type: string
        mermaid_diagram:
          description: Mermaid diagram
          type: string
        openapi_diff_base_source_blob_digest:
          description: The blob digest of the base source.
          type: string
        openapi_diff_base_source_namespace_name:
          description: The namespace name of the base source.
          type: string
        openapi_diff_base_source_revision_digest:
          description: The revision digest of the base source.
          type: string
        openapi_diff_breaking_changes_count:
          description: The number of breaking changes in the openapi diff report.
          type: integer
        openapi_diff_bump_type:
          description: Bump type of the lock file (calculated semver delta, or a custom change (manual release))
          enum:
            - major
            - minor
            - patch
            - none
          type: string
        openapi_diff_report_digest:
          description: The checksum of the openapi diff report.
          type: string
        publish_package_name:
          description: Name of the published package.
          type: string
        publish_package_registry_name:
          description: Name of the registry where the package was published.
          type: string
        publish_package_url:
          description: URL of the published package.
          type: string
        publish_package_version:
          description: Version of the published package.
          type: string
        raw_command:
          description: Full CLI command.
          type: string
        repo_label:
          description: Label of the git repository.
          type: string
        source_blob_digest:
          description: The blob digest of the source.
          type: string
        source_namespace_name:
          description: The namespace name of the source.
          type: string
        source_revision_digest:
          description: The revision digest of the source.
          type: string
        speakeasy_api_key_name:
          description: Identifier of the Speakeasy API key.
          type: string
        speakeasy_version:
          description: Version of the Speakeasy CLI.
          type: string
        success:
          description: Indicates whether the event was successful.
          type: boolean
        workflow_lock_post_raw:
          description: Workflow lock file (post execution)
          type: string
        workflow_lock_pre_raw:
          description: Workflow lock file (prior to execution)
          type: string
        workflow_post_raw:
          description: Workflow file (post execution)
          type: string
        workflow_pre_raw:
          description: Workflow file (prior to execution)
          type: string
        workspace_id:
          description: Identifier of the workspace.
          type: string
      required:
        - id
        - execution_id
        - workspace_id
        - speakeasy_api_key_name
        - interaction_type
        - local_started_at
        - created_at
        - speakeasy_version
        - success
      type: object
    CliEventBatch:
      items:
        $ref: '#/components/schemas/CliEvent'
      minItems: 1
      type: array
    EmbedAccessTokenResponse:
      description: An EmbedAccessTokenResponse contains a token that can be used to embed a Speakeasy dashboard.
      properties:
        access_token:
          type: string
      required:
        - access_token
      type: object
    EmbedToken:
      description: A representation of an embed token granted for working with Speakeasy components.
      properties:
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        created_by:
          description: The ID of the user that created this token.
          readOnly: true
          type: string
        description:
          description: A detailed description of the EmbedToken.
          type: string
        expires_at:
          description: The time this token expires.
          format: date-time
          readOnly: true
          type: string
        filters:
          description: The filters applied to this token.
          readOnly: true
          type: string
        id:
          description: The ID of this EmbedToken.
          readOnly: true
          type: string
        last_used:
          description: The last time this token was used.
          format: date-time
          readOnly: true
          type: string
        revoked_at:
          description: The time this token was revoked.
          format: date-time
          readOnly: true
          type: string
        revoked_by:
          description: The ID of the user that revoked this token.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this token belongs to.
          readOnly: true
          type: string
      required:
        - created_by
        - created_at
        - description
        - expires_at
        - filters
        - id
        - workspace_id
      type: object
    Error:
      description: The `Status` type defines a logical error model
      properties:
        message:
          description: A developer-facing error message.
          type: string
        status_code:
          description: The HTTP status code
          format: int32
          type: integer
      required:
        - message
        - status_code
      type: object
    FeatureFlag:
      description: A feature flag is a key-value pair that can be used to enable or disable features.
      properties:
        feature_flag:
          type: string
        trial_ends_at:
          format: date-time
          nullable: true
          type: string
      required:
        - feature_flag
    Filter:
      description: A filter is a key-value pair that can be used to filter a list of requests.
      properties:
        key:
          description: The key of the filter.
          type: string
        operator:
          description: The operator of the filter.
          type: string
        value:
          description: The value of the filter.
          type: string
      required:
        - key
        - value
        - operator
      type: object
    Filters:
      description: Filters are used to query requests.
      properties:
        filters:
          description: A list of filters to apply to the query.
          items:
            $ref: '#/components/schemas/Filter'
          type: array
        limit:
          description: The maximum number of results to return.
          type: integer
        offset:
          description: The offset to start the query from.
          type: integer
        operator:
          description: The operator to use when combining filters.
          type: string
      required:
        - filters
        - limit
        - offset
        - operator
      type: object
    GenerateOpenApiSpecDiff:
      properties:
        current_schema:
          type: string
        new_schema:
          type: string
      required:
        - current_schema
        - new_schema
      type: object
    GetNamespacesResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Namespace'
          type: array
      required:
        - items
    GetRevisionsResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Revision'
          type: array
        next_page_token:
          type: string
      required:
        - items
        - next_page_token
    GetTagsResponse:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
        - items
    GithubConfigureCodeSamplesRequest:
      description: A request to configure GitHub code samples
      properties:
        org:
          description: The GitHub organization name
          type: string
        repo:
          description: The GitHub repository name
          type: string
        targetName:
          description: The target name for the code samples
          type: string
      required:
        - org
        - repo
        - targetName
      type: object
    GithubConfigureCodeSamplesResponse:
      description: A response to configure GitHub code samples
      properties:
        codeSampleOverlayRegistryURL:
          description: The URL of the code sample overlay registry
          type: string
        ghActionID:
          description: The ID of the GitHub action that was dispatched
          type: string
        source:
          $ref: '#/components/schemas/WorkflowDocument'
      required:
        - source
        - codeSampleOverlayRegistryURL
      type: object
    GithubConfigureMintlifyRepoRequest:
      description: A request to configure a GitHub repository for mintlify
      properties:
        input:
          description: The input OpenAPI document
          type: string
        org:
          description: The GitHub organization name
          type: string
        overlays:
          description: The overlays to apply
          items:
            type: string
          type: array
        repo:
          description: The GitHub repository name
          type: string
      required:
        - org
        - repo
        - input
        - overlays
      type: object
    GithubConfigureTargetRequest:
      description: A request to configure a GitHub target
      properties:
        org:
          description: The GitHub organization name
          type: string
        repo_name:
          description: The GitHub repository name
          type: string
      required:
        - org
        - repo_name
      type: object
    GithubGetActionResponse:
      description: response to a getting the latest action run on a GitHub request
      properties:
        run_status:
          description: The status of the latest action run if available
          type: string
        run_url:
          description: The URL for latest action run if available
          type: string
      type: object
    GithubMissingPublishingSecretsResponse:
      description: A valid response containing MISSING publishing secret keys for a github target
      properties:
        missing_secrets:
          items:
            type: string
          type: array
      type: object
    GithubPublishingPRResponse:
      description: Open generation PRs pending publishing
      properties:
        generation_pull_request:
          type: string
        pending_version:
          type: string
      type: object
    GithubStorePublishingSecretsRequest:
      description: A request to store publishing secrets for a github target
      properties:
        generate_gen_lock_id:
          description: The generation lock ID
          type: string
        secrets:
          additionalProperties:
            type: string
          description: A map of secrets to store in the GitHub target
          type: object
      required:
        - generate_gen_lock_id
      type: object
    GithubTriggerActionRequest:
      description: A request to trigger an action on a GitHub target
      properties:
        gen_lock_id:
          description: The generation lock ID
          type: string
        org:
          description: The GitHub organization name
          type: string
        repo_name:
          description: The GitHub repository name
          type: string
        set_version:
          description: A version to override the SDK too in workflow dispatch
          type: string
        target_name:
          description: The target name for the action
          type: string
      required:
        - org
        - repo_name
        - gen_lock_id
      type: object
    InteractionType:
      description: Type of interaction.
      enum:
        - CI_EXEC
        - CLI_EXEC
        - LINT
        - OPENAPI_DIFF
        - TARGET_GENERATE
        - TOMBSTONE
        - AUTHENTICATE
        - QUICKSTART
        - RUN
        - CONFIGURE
        - PUBLISH
      type: string
    Manifest:
      description: Returns the requested manifest file
      example:
        config:
          digest: sha256:6d1ef012b5674ad8a127ecfa9b5e6f5178d171b90ee462846974177fd9bdd39f
          mediaType: application/vnd.docker.container.image.v1+json
          size: 1512
        layers:
          - digest: sha256:5d20c808ce198565ff70b3ed23a991dd49afac45dece63474b27ce6ed036adc6
            mediaType: application/vnd.docker.image.rootfs.diff.tar.gzip
            size: 2107098
        mediaType: application/vnd.docker.distribution.manifest.v2+json
        schemaVersion: 2
      properties:
        annotations:
          $ref: '#/components/schemas/Annotations'
        artifactType:
          description: Type of artifact
          type: string
        layers:
          description: List of V2 image layer information
          items:
            $ref: '#/components/schemas/V2Descriptor'
          type: array
        mediaType:
          description: Media type usually application/vnd.docker.distribution.manifest.v2+json if this is in the accept header
          type: string
        schemaVersion:
          description: Schema version
          type: integer
    Namespace:
      description: A namespace contains many revisions.
      properties:
        created_at:
          format: date-time
          readOnly: true
          type: string
        id:
          description: '{organization_slug}/{workspace_slug}/{namespace_name}'
          type: string
        name:
          description: A human-readable name for the namespace.
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
      required:
        - id
        - name
        - created_at
        - updated_at
    OASInfo:
      properties:
        description:
          type: string
        license:
          properties:
            identifier:
              type: string
          type: object
        summary:
          type: string
        title:
          type: string
        version:
          type: string
      required:
        - title
        - summary
        - description
        - version
        - license
      type: object
    OASOperation:
      properties:
        description:
          type: string
        method:
          type: string
        operation_id:
          type: string
        path:
          type: string
        tags:
          items:
            type: string
          type: array
      required:
        - method
        - path
        - operation_id
        - description
        - tags
      type: object
    OASSummary:
      properties:
        info:
          $ref: '#/components/schemas/OASInfo'
        operations:
          items:
            $ref: '#/components/schemas/OASOperation'
          type: array
      required:
        - info
        - operations
      type: object
    Organization:
      description: A speakeasy organization
      properties:
        account_type:
          enum:
            - free
            - scale-up
            - enterprise
          type: string
        created_at:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        telemetry_disabled:
          type: boolean
        updated_at:
          format: date-time
          type: string
      required:
        - id
        - name
        - account_type
        - telemetry_disabled
      type: object
    OrganizationUsage:
      properties:
        accessible:
          description: Indicates if the features are accessible
          type: boolean
        accessible_features:
          description: Features that are accessible
          items:
            type: string
          type: array
        gen_lock_ids:
          description: List of generation lock IDs
          items:
            type: string
          type: array
        language:
          description: The programming language used
          type: string
        number_of_operations:
          description: Number of operations performed
          type: integer
        used_features:
          description: Features that have been used
          items:
            type: string
          type: array
        workspaces:
          description: List of workspace IDs
          items:
            type: string
          type: array
      required:
        - number_of_operations
        - language
        - used_features
        - accessible_features
        - accessible
        - workspaces
        - gen_lock_ids
      type: object
    OrganizationUsageResponse:
      description: A billing summary of organization usage
      properties:
        allowed_languages:
          description: List of allowed languages
          items:
            type: string
          type: array
        free_trial_expiry:
          description: Expiry date of the free trial, will be null if no trial
          format: date-time
          readOnly: true
          type: string
        total_allowed_languages:
          description: Total number of allowed languages, -1 if unlimited
          type: integer
        usage:
          items:
            $ref: '#/components/schemas/OrganizationUsage'
          type: array
      required:
        - usage
        - total_allowed_languages
        - allowed_languages
      type: object
    Plugin:
      description: A plugin is a short script that is run against ingested requests
      properties:
        code:
          type: string
        created_at:
          format: date-time
          type: string
        eval_hash:
          type: string
        plugin_id:
          type: string
        title:
          type: string
        updated_at:
          format: date-time
          type: string
        workspace_id:
          type: string
      required:
        - workspace_id
        - plugin_id
        - title
        - code
      type: object
    PreflightToken:
      description: A PreflightToken is a token that allows access to the OCI distribution endpoints.
      properties:
        auth_token:
          type: string
      required:
        - access_token
    Report:
      properties:
        type:
          enum:
            - linting
            - changes
          type: string
      type: object
    RequestMetadata:
      description: Key-Value pairs associated with a request
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    Revision:
      properties:
        created_at:
          format: date-time
          readOnly: true
          type: string
        digest:
          example: sha256:6d1ef012b5674ad8a127ecfa9b5e6f5178d171b90ee462846974177fd9bdd39f
          type: string
        id:
          description: Format {namespace_id}/{revision_digest}
          type: string
        namespace_name:
          type: string
        tags:
          items:
            type: string
          type: array
        updated_at:
          format: date-time
          readOnly: true
          type: string
      required:
        - id
        - namespace_name
        - digest
        - tags
        - created_at
        - updated_at
    Schema:
      description: A Schema represents an API schema for a particular Api and Version.
      properties:
        api_id:
          description: The ID of the Api this Schema belongs to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        description:
          description: A detailed description of the Schema.
          type: string
        revision_id:
          description: An ID referencing this particular revision of the Schema.
          type: string
        version_id:
          description: The version ID of the Api this Schema belongs to.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this Schema belongs to.
          readOnly: true
          type: string
      required:
        - api_id
        - created_at
        - description
        - revision_id
        - version_id
        - workspace_id
      type: object
    SchemaDiff:
      description: A SchemaDiff represents a diff of two Schemas.
      properties:
        additions:
          description: Holds every addition change in the diff.
          items:
            type: string
          type: array
        deletions:
          description: Holds every deletion change in the diff.
          items:
            type: string
          type: array
        modifications:
          additionalProperties:
            properties:
              From:
                description: Represents the previous value of the element.
                type: string
              To:
                description: Represents the current value of the element.
                type: string
            required:
              - From
              - To
            title: ValueChange
            type: object
          description: Holds every modification change in the diff.
          type: object
      required:
        - additions
        - deletions
        - modifications
      type: object
    SuggestOperationIDsOpts:
      properties:
        depth_style:
          enum:
            - original
            - flat
            - nested
            - deep
          type: string
        style:
          enum:
            - standardize
            - resource
          type: string
      type: object
    SuggestedOperationIDs:
      properties:
        operation_ids:
          additionalProperties:
            items:
              type: string
            type: array
      required:
        - operation_ids
      title: suggestion
      type: object
    Tag:
      properties:
        id:
          description: Format {namespace_id}/{tag}
          type: string
        name:
          description: Human readable tag name
          type: string
        namespace_name:
          type: string
        revision_digest:
          type: string
      required:
        - id
        - name
        - namespace_name
        - revision_digest
    TargetSDK:
      properties:
        commit_head:
          description: Remote commit ID.
          type: string
        continuous_integration_environment:
          description: Name of the CI environment.
          type: string
        error:
          description: Error message if the last event was not successful.
          type: string
        generate_config_post_version:
          description: Version of the generated target (post generation)
          type: string
        generate_eligible_features:
          description: Eligible feature set during generation
          type: string
        generate_gen_lock_id:
          description: gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
          type: string
        generate_gen_lock_pre_features:
          description: Features prior to generation
          type: string
        generate_gen_lock_pre_version:
          description: Artifact version for the Previous Generation
          type: string
        generate_number_of_operations_ignored:
          description: The number of operations ignored in generation.
          type: integer
        generate_number_of_operations_used:
          description: The number of operations used in generation.
          type: integer
        generate_published:
          description: Indicates whether the target was considered published.
          type: boolean
        generate_target:
          description: eg `typescript`, `terraform`, `python`
          type: string
        generate_target_name:
          description: The workflow name of the target.
          type: string
        generate_target_version:
          description: The version of the Speakeasy generator for this target eg v2 of the typescript generator.
          type: string
        gh_action_organization:
          description: GitHub organization of the action.
          type: string
        gh_action_ref:
          description: GitHub Action ref value.
          type: string
        gh_action_repository:
          description: GitHub repository of the action.
          type: string
        gh_action_run_link:
          description: Link to the GitHub action run.
          type: string
        gh_action_version:
          description: Version of the GitHub action.
          type: string
        git_relative_cwd:
          description: Current working directory relative to the git root.
          type: string
        git_remote_default_owner:
          description: Default owner for git remote.
          type: string
        git_remote_default_repo:
          description: Default repository name for git remote.
          type: string
        git_user_email:
          description: User email from git configuration.
          type: string
        git_user_name:
          description: User's name from git configuration. (not GitHub username)
          type: string
        hostname:
          description: Remote hostname.
          type: string
        id:
          description: Unique identifier of the target the same as `generate_gen_lock_id`
          type: string
        last_event_created_at:
          description: Timestamp when the event was created in the database.
          format: date-time
          type: string
        last_event_id:
          description: Unique identifier of the last event for the target
          type: string
        last_event_interaction_type:
          $ref: '#/components/schemas/InteractionType'
          description: Type of interaction.
        repo_label:
          description: Label of the git repository.
          type: string
        source_blob_digest:
          description: The blob digest of the source.
          type: string
        source_namespace_name:
          description: The namespace name of the source.
          type: string
        source_revision_digest:
          description: The revision digest of the source.
          type: string
        success:
          description: Indicates whether the event was successful.
          type: boolean
        workflow_post_raw:
          description: Workflow file (post execution)
          type: string
        workflow_pre_raw:
          description: Workflow file (prior to execution)
          type: string
      required:
        - id
        - generate_target
        - generate_gen_lock_id
        - last_event_id
        - last_event_created_at
        - last_event_interaction_type
      type: object
    TargetSDKList:
      items:
        $ref: '#/components/schemas/TargetSDK'
      minItems: 1
      type: array
    UnboundedRequest:
      description: An UnboundedRequest represents the HAR content capture by Speakeasy when logging a request.
      properties:
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        har:
          description: The HAR content of the request.
          readOnly: true
          type: string
        har_size_bytes:
          description: The size of the HAR content in bytes.
          readOnly: true
          type: integer
        request_id:
          description: The ID of this request.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this request was made to.
          readOnly: true
          type: string
      required:
        - created_at
        - har
        - har_size_bytes
        - request_id
        - workspace_id
      type: object
    User:
      properties:
        admin:
          description: Indicates whether the user is an admin.
          type: boolean
        confirmed:
          description: Indicates whether the user has been confirmed.
          type: boolean
        created_at:
          description: Timestamp of the user's creation.
          format: date-time
          type: string
        default_workspace_id:
          description: Identifier of the default workspace.
          type: string
        display_name:
          description: Display name of the user.
          type: string
        email:
          description: Email address of the user.
          type: string
        email_verified:
          description: Indicates whether the email address has been verified.
          type: boolean
        github_handle:
          description: GitHub handle of the user.
          type: string
        id:
          description: Unique identifier for the user.
          type: string
        last_login_at:
          description: Timestamp of the last login.
          format: date-time
          type: string
        photo_url:
          description: URL of the user's photo.
          type: string
        updated_at:
          description: Timestamp of the user's last update.
          format: date-time
          type: string
        whitelisted:
          description: Indicates whether the user has been whitelisted.
          type: boolean
      required:
        - id
        - email
        - email_verified
        - display_name
        - confirmed
        - whitelisted
        - last_login_at
        - admin
        - created_at
        - updated_at
      type: object
    V2Descriptor:
      description: V2 descriptor
      properties:
        annotations:
          $ref: '#/components/schemas/Annotations'
        digest:
          description: Digest
          type: string
        mediaType:
          description: Media type
          type: string
        size:
          description: Size
          type: integer
    VersionMetadata:
      description: A set of keys and associated values, attached to a particular version of an Api.
      properties:
        api_id:
          description: The ID of the Api this Metadata belongs to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        meta_key:
          description: The key for this metadata.
          type: string
        meta_value:
          description: One of the values for this metadata.
          type: string
        version_id:
          description: The version ID of the Api this Metadata belongs to.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this Metadata belongs to.
          readOnly: true
          type: string
      required:
        - api_id
        - created_at
        - meta_key
        - meta_value
        - version_id
        - workspace_id
      type: object
    WorkflowDocument:
      description: A document referenced by a workflow
      properties:
        auth:
          properties:
            header:
              type: string
            secret:
              type: string
          required:
            - header
            - secret
          type: object
        location:
          type: string
      required:
        - location
  securitySchemes:
    APIKey:
      description: The API Key for the workspace
      in: header
      name: x-api-key
      type: apiKey
    Bearer:
      description: The Bearer token for the workspace
      scheme: bearer
      type: http
externalDocs:
  description: The Speakeasy Platform Documentation
  url: /docs
info:
  description: The Speakeasy API allows teams to manage common operations with their APIs
  title: Speakeasy API
  version: 0.4.0 .
openapi: 3.0.3
paths:
  /v1/apis:
    get:
      description: |-
        Get a list of all Apis and their versions for a given workspace.
        Supports filtering the APIs based on metadata attributes.
      operationId: getApis
      parameters:
        - description: Configuration for filter operations
          explode: true
          in: query
          name: op
          required: false
          schema:
            properties:
              and:
                description: Whether to AND or OR the filters
                type: boolean
            required:
              - and
            type: object
          style: deepObject
        - description: Metadata to filter Apis on
          explode: true
          in: query
          name: metadata
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            description: Map of metadata key/values to filter on
            type: object
          style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A list of Apis for the given workspace
                items:
                  $ref: '#/components/schemas/Api'
                title: Apis
                type: array
              x-speakeasy-usage-example: true
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get a list of Apis for a given workspace
      tags:
        - Apis
      x-codeSamples:
        - label: getApis
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apis.getApis({
                and: false,
              }, {
                "key": [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: getApis
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetApisRequest{}
                ctx := context.Background()
                res, err := s.Apis.GetApis(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Apis != nil {
                    // handle response
                }
            }
      x-speakeasy-usage-example: true
  /v1/apis/{apiID}:
    get:
      description: |-
        Get all Api versions for a particular ApiEndpoint.
        Supports filtering the versions based on metadata attributes.
      operationId: getAllApiVersions
      parameters:
        - description: The ID of the Api to retrieve.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: Configuration for filter operations
          explode: true
          in: query
          name: op
          schema:
            properties:
              and:
                description: Whether to AND or OR the filters
                type: boolean
            required:
              - and
            type: object
          style: deepObject
        - description: Metadata to filter Apis on
          explode: true
          in: query
          name: metadata
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            description: Map of metadata key/values to filter on
            type: object
          style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                description: A list of Api versions for the given apiID
                items:
                  $ref: '#/components/schemas/Api'
                title: Apis
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get all Api versions for a particular ApiEndpoint.
      tags:
        - Apis
      x-codeSamples:
        - label: getAllApiVersions
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apis.getAllApiVersions("<value>", {
                and: false,
              }, {
                "key": [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: getAllApiVersions
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAllAPIVersionsRequest{
                    APIID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.GetAllAPIVersions(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Apis != nil {
                    // handle response
                }
            }
    put:
      description: |-
        Upsert an Api. If the Api does not exist, it will be created.
        If the Api exists, it will be updated.
      operationId: upsertApi
      parameters:
        - description: The ID of the Api to upsert.
          in: path
          name: apiID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Api'
        description: A JSON representation of the Api to upsert
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Upsert an Api
      tags:
        - Apis
      x-codeSamples:
        - label: upsertApi
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apis.upsertApi("<value>", {
                apiId: "<value>",
                description: "Synchronised 5th generation knowledge user",
                versionId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: upsertApi
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.UpsertAPIRequest{
                    APIID: "<value>",
                    API: shared.APIInput{
                        APIID: "<value>",
                        Description: "Synchronised 5th generation knowledge user",
                        VersionID: "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Apis.UpsertAPI(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.API != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/api_endpoints:
    get:
      operationId: getAllApiEndpoints
      parameters:
        - description: The ID of the Api to retrieve ApiEndpoints for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiEndpoint'
                title: ApiEndpoints
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get all Api endpoints for a particular apiID.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: getAllApiEndpoints
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.getAllApiEndpoints("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getAllApiEndpoints
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAllAPIEndpointsRequest{
                    APIID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GetAllAPIEndpoints(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoints != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}:
    delete:
      description: Delete a particular version of an Api. The will also delete all associated ApiEndpoints, Metadata, Schemas & Request Logs (if using a Postgres datastore).
      operationId: deleteApi
      parameters:
        - description: The ID of the Api to delete.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Delete an Api.
      tags:
        - Apis
      x-codeSamples:
        - label: deleteApi
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apis.deleteApi("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteApi
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteAPIRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.DeleteAPI(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints:
    get:
      operationId: getAllForVersionApiEndpoints
      parameters:
        - description: The ID of the Api to retrieve ApiEndpoints for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to retrieve ApiEndpoints for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiEndpoint'
                title: APIEndpoints
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get all ApiEndpoints for a particular apiID and versionID.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: getAllForVersionApiEndpoints
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.getAllForVersionApiEndpoints("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getAllForVersionApiEndpoints
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAllForVersionAPIEndpointsRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GetAllForVersionAPIEndpoints(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoints != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}:
    delete:
      description: Delete an ApiEndpoint. This will also delete all associated Request Logs (if using a Postgres datastore).
      operationId: deleteApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to delete.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Delete an ApiEndpoint.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: deleteApiEndpoint
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.deleteApiEndpoint("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteApiEndpoint
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.DeleteAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
    get:
      operationId: getApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to retrieve.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEndpoint'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get an ApiEndpoint.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: getApiEndpoint
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.getApiEndpoint("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getApiEndpoint
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GetAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoint != nil {
                    // handle response
                }
            }
    put:
      description: Upsert an ApiEndpoint. If the ApiEndpoint does not exist it will be created, otherwise it will be updated.
      operationId: upsertApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to upsert.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiEndpoint'
        description: A JSON representation of the ApiEndpoint to upsert.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEndpoint'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Upsert an ApiEndpoint.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: upsertApiEndpoint
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.upsertApiEndpoint("<value>", "<value>", "<value>", {
                apiEndpointId: "<value>",
                description: "Public-key systematic attitude",
                displayName: "Camille.Schaefer11",
                method: "<value>",
                path: "/Library",
                versionId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: upsertApiEndpoint
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.UpsertAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                    APIEndpoint: shared.APIEndpointInput{
                        APIEndpointID: "<value>",
                        Description: "Public-key systematic attitude",
                        DisplayName: "Camille.Schaefer11",
                        Method: "<value>",
                        Path: "/Library",
                        VersionID: "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.UpsertAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoint != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/openapi:
    get:
      description: |-
        This endpoint will generate a new operation in any registered OpenAPI document if the operation does not already exist in the document.
        Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
      operationId: generateOpenApiSpecForApiEndpoint
      parameters:
        - description: The ID of the Api to generate an OpenAPI specification for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate an OpenAPI specification for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to generate an OpenAPI specification for.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateOpenApiSpecDiff'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Generate an OpenAPI specification for a particular ApiEndpoint.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: generateOpenApiSpecForApiEndpoint
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.generateOpenApiSpecForApiEndpoint("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: generateOpenApiSpecForApiEndpoint
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GenerateOpenAPISpecForAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GenerateOpenAPISpecForAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GenerateOpenAPISpecDiff != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/postman:
    get:
      description: Generates a postman collection that allows the endpoint to be called from postman variables produced for any path/query/header parameters included in the OpenAPI document.
      operationId: generatePostmanCollectionForApiEndpoint
      parameters:
        - description: The ID of the Api to generate a Postman collection for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate a Postman collection for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to generate a Postman collection for.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                title: PostmanCollection
                type: string
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Generate a Postman collection for a particular ApiEndpoint.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: generatePostmanCollectionForApiEndpoint
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.generatePostmanCollectionForApiEndpoint("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: generatePostmanCollectionForApiEndpoint
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GeneratePostmanCollectionForAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GeneratePostmanCollectionForAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PostmanCollection != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/find/{displayName}:
    get:
      description: |-
        Find an ApiEndpoint via its displayName (set by operationId from a registered OpenAPI schema).
        This is useful for finding the ID of an ApiEndpoint to use in the /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID} endpoints.
      operationId: findApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The displayName of the ApiEndpoint to find (set by operationId from OpenAPI schema).
          in: path
          name: displayName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEndpoint'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Find an ApiEndpoint via its displayName.
      tags:
        - ApiEndpoints
      x-codeSamples:
        - label: findApiEndpoint
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apiEndpoints.findApiEndpoint("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: findApiEndpoint
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.FindAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    DisplayName: "Don.Strosin",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.FindAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoint != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/generate/openapi:
    get:
      description: |-
        This endpoint will generate any missing operations in any registered OpenAPI document if the operation does not already exist in the document.
        Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
      operationId: generateOpenApiSpec
      parameters:
        - description: The ID of the Api to generate an OpenAPI specification for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate an OpenAPI specification for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateOpenApiSpecDiff'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Generate an OpenAPI specification for a particular Api.
      tags:
        - Apis
      x-codeSamples:
        - label: generateOpenApiSpec
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apis.generateOpenApiSpec("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: generateOpenApiSpec
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GenerateOpenAPISpecRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.GenerateOpenAPISpec(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GenerateOpenAPISpecDiff != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/generate/postman:
    get:
      description: Generates a postman collection containing all endpoints for a particular API. Includes variables produced for any path/query/header parameters included in the OpenAPI document.
      operationId: generatePostmanCollection
      parameters:
        - description: The ID of the Api to generate a Postman collection for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate a Postman collection for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                title: PostmanCollection
                type: string
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Generate a Postman collection for a particular Api.
      tags:
        - Apis
      x-codeSamples:
        - label: generatePostmanCollection
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.apis.generatePostmanCollection("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: generatePostmanCollection
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GeneratePostmanCollectionRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.GeneratePostmanCollection(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PostmanCollection != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/metadata:
    get:
      operationId: getVersionMetadata
      parameters:
        - description: The ID of the Api to retrieve metadata for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to retrieve metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VersionMetadata'
                title: VersionMetadata
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get all metadata for a particular apiID and versionID.
      tags:
        - Metadata
      x-codeSamples:
        - label: getVersionMetadata
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.metadata.getVersionMetadata("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getVersionMetadata
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetVersionMetadataRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Metadata.GetVersionMetadata(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.VersionMetadata != nil {
                    // handle response
                }
            }
    post:
      operationId: insertVersionMetadata
      parameters:
        - description: The ID of the Api to insert metadata for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to insert metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionMetadata'
        description: A JSON representation of the metadata to insert.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionMetadata'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Insert metadata for a particular apiID and versionID.
      tags:
        - Metadata
      x-codeSamples:
        - label: insertVersionMetadata
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.metadata.insertVersionMetadata("<value>", "<value>", {
                metaKey: "<value>",
                metaValue: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: insertVersionMetadata
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.InsertVersionMetadataRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    VersionMetadata: shared.VersionMetadataInput{
                        MetaKey: "<value>",
                        MetaValue: "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Metadata.InsertVersionMetadata(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.VersionMetadata != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/metadata/{metaKey}/{metaValue}:
    delete:
      operationId: deleteVersionMetadata
      parameters:
        - description: The ID of the Api to delete metadata for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The key of the metadata to delete.
          in: path
          name: metaKey
          required: true
          schema:
            type: string
        - description: The value of the metadata to delete.
          in: path
          name: metaValue
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Delete metadata for a particular apiID and versionID.
      tags:
        - Metadata
      x-codeSamples:
        - label: deleteVersionMetadata
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.metadata.deleteVersionMetadata("<value>", "<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteVersionMetadata
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteVersionMetadataRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    MetaKey: "<value>",
                    MetaValue: "<value>",
                }
                ctx := context.Background()
                res, err := s.Metadata.DeleteVersionMetadata(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema:
    get:
      description: "Returns information about the last uploaded schema for a particular API version. \nThis won't include the schema itself, that can be retrieved via the downloadSchema operation."
      operationId: getSchema
      parameters:
        - description: The ID of the Api to get the schema for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get information about the latest schema.
      tags:
        - Schemas
      x-codeSamples:
        - label: getSchema
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.getSchema("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSchema
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Schema != nil {
                    // handle response
                }
            }
    post:
      description: |-
        Allows uploading a schema for a particular API version.
        This will be used to populate ApiEndpoints and used as a base for any schema generation if present.
      operationId: registerSchema
      parameters:
        - description: The ID of the Api to get the schema for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
              required:
                - file
              type: object
        description: The schema file to upload provided as a multipart/form-data file segment.
        required: true
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Register a schema.
      tags:
        - Schemas
      x-codeSamples:
        - label: registerSchema
          lang: typescript
          source: |-
            import { openAsBlob } from "node:fs";
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.registerSchema("<value>", "<value>", {
                file: await openAsBlob("./sample-file"),
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: registerSchema
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.RegisterSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RequestBody: operations.RegisterSchemaRequestBody{
                        File: operations.File{
                            FileName: "your_file_here",
                            Content: []byte("0xCAFCA03e0e"),
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Schemas.RegisterSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/{baseRevisionID}/diff/{targetRevisionID}:
    get:
      operationId: getSchemaDiff
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The base revision ID of the schema to retrieve.
          in: path
          name: baseRevisionID
          required: true
          schema:
            type: string
        - description: The target revision ID of the schema to retrieve.
          in: path
          name: targetRevisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDiff'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get a diff of two schema revisions for an Api.
      tags:
        - Schemas
      x-codeSamples:
        - label: getSchemaDiff
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.getSchemaDiff("<value>", "<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSchemaDiff
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemaDiffRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    BaseRevisionID: "<value>",
                    TargetRevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchemaDiff(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SchemaDiff != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/{revisionID}:
    delete:
      operationId: deleteSchema
      parameters:
        - description: The ID of the Api to delete schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The revision ID of the schema to delete.
          in: path
          name: revisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Delete a particular schema revision for an Api.
      tags:
        - Schemas
      x-codeSamples:
        - label: deleteSchema
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.deleteSchema("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteSchema
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.DeleteSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
    get:
      description: "Returns information about the last uploaded schema for a particular schema revision. \nThis won't include the schema itself, that can be retrieved via the downloadSchema operation."
      operationId: getSchemaRevision
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The revision ID of the schema to retrieve.
          in: path
          name: revisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get information about a particular schema revision for an Api.
      tags:
        - Schemas
      x-codeSamples:
        - label: getSchemaRevision
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.getSchemaRevision("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSchemaRevision
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemaRevisionRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchemaRevision(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Schema != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/{revisionID}/download:
    get:
      operationId: downloadSchemaRevision
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The revision ID of the schema to retrieve.
          in: path
          name: revisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                title: Schema
                type: string
            application/x-yaml:
              schema:
                format: binary
                title: Schema
                type: string
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Download a particular schema revision for an Api.
      tags:
        - Schemas
      x-codeSamples:
        - label: downloadSchemaRevision
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.downloadSchemaRevision("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: downloadSchemaRevision
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DownloadSchemaRevisionRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.DownloadSchemaRevision(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONSchema != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/download:
    get:
      operationId: downloadSchema
      parameters:
        - description: The ID of the Api to download the schema for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                title: Schema
                type: string
            application/x-yaml:
              schema:
                format: binary
                title: Schema
                type: string
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Download the latest schema for a particular apiID.
      tags:
        - Schemas
      x-codeSamples:
        - label: downloadSchema
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.downloadSchema("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: downloadSchema
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DownloadSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.DownloadSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONSchema != nil {
                    // handle response
                }
            }
  /v1/apis/{apiID}/version/{versionID}/schemas:
    get:
      description: "Returns information the schemas associated with a particular apiID. \nThis won't include the schemas themselves, they can be retrieved via the downloadSchema operation."
      operationId: getSchemas
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Schema'
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get information about all schemas associated with a particular apiID.
      tags:
        - Schemas
      x-codeSamples:
        - label: getSchemas
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.schemas.getSchemas("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSchemas
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemasRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchemas(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Schemata != nil {
                    // handle response
                }
            }
  /v1/artifacts/namespaces:
    get:
      operationId: getNamespaces
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespacesResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Each namespace contains many revisions.
      tags:
        - Artifacts
      x-codeSamples:
        - label: getNamespaces
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.getNamespaces();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getNamespaces
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Artifacts.GetNamespaces(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GetNamespacesResponse != nil {
                    // handle response
                }
            }
  /v1/artifacts/namespaces/{namespace_name}/revisions:
    get:
      operationId: getRevisions
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - description: Token to retrieve the next page of results
          in: query
          name: next_page_token
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRevisionsResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Artifacts
      x-codeSamples:
        - label: getRevisions
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.getRevisions("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getRevisions
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetRevisionsRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetRevisions(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GetRevisionsResponse != nil {
                    // handle response
                }
            }
  /v1/artifacts/namespaces/{namespace_name}/revisions/{revision_reference}/summary:
    get:
      operationId: getOASSummary
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - in: path
          name: revision_reference
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OASSummary'
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Artifacts
      x-codeSamples:
        - label: getOASSummary
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.getOASSummary("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getOASSummary
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetOASSummaryRequest{
                    NamespaceName: "<value>",
                    RevisionReference: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetOASSummary(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.OASSummary != nil {
                    // handle response
                }
            }
  /v1/artifacts/namespaces/{namespace_name}/tags:
    get:
      operationId: getTags
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagsResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Artifacts
      x-codeSamples:
        - label: getTags
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.getTags("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getTags
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetTagsRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetTags(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GetTagsResponse != nil {
                    // handle response
                }
            }
    post:
      operationId: postTags
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTags'
        description: A JSON representation of the tags to add
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Add tags to an existing revision
      tags:
        - Artifacts
      x-codeSamples:
        - label: postTags
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.postTags("<value>", {
                revisionDigest: "<value>",
                tags: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: postTags
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.PostTagsRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.PostTags(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/artifacts/preflight:
    post:
      operationId: preflight
      requestBody:
        $ref: '#/components/requestBodies/PreflightRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreflightToken'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get access token for communicating with OCI distribution endpoints
      tags:
        - Artifacts
      x-codeSamples:
        - label: preflight
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.preflight({
                namespaceName: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: preflight
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                var request *shared.PreflightRequest = &shared.PreflightRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.Preflight(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PreflightToken != nil {
                    // handle response
                }
            }
  /v1/auth/access_token:
    get:
      operationId: getAccessToken
      parameters:
        - description: The workspace ID
          in: query
          name: workspace_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
          description: OK
        default:
          $ref: '#/components/responses/default'
      security:
        - {}
      summary: Get or refresh an access token for the current workspace.
      tags:
        - Auth
      x-codeSamples:
        - label: getAccessToken
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK();

            async function run() {
              const result = await sdk.auth.getAccessToken("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getAccessToken
          lang: go
          source: |-
            package main

            import(
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New()
                request := operations.GetAccessTokenRequest{
                    WorkspaceID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Auth.GetAccessToken(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.AccessToken != nil {
                    // handle response
                }
            }
  /v1/auth/validate:
    get:
      operationId: validateApiKey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyDetails'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Validate the current api key.
      tags:
        - Auth
      x-codeSamples:
        - label: validateApiKey
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.auth.validateApiKey();

              // Handle the result
              console.log(result)
            }

            run();
        - label: validateApiKey
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Auth.ValidateAPIKey(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIKeyDetails != nil {
                    // handle response
                }
            }
  /v1/eventlog/{requestID}:
    get:
      operationId: getRequestFromEventLog
      parameters:
        - description: The ID of the request to retrieve.
          in: path
          name: requestID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnboundedRequest'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get information about a particular request.
      tags:
        - Requests
      x-codeSamples:
        - label: getRequestFromEventLog
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.requests.getRequestFromEventLog("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getRequestFromEventLog
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetRequestFromEventLogRequest{
                    RequestID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Requests.GetRequestFromEventLog(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnboundedRequest != nil {
                    // handle response
                }
            }
  /v1/eventlog/{requestID}/generate/postman:
    get:
      description: "Generates a Postman collection for a particular request. \nAllowing it to be replayed with the same inputs that were captured by the SDK."
      operationId: generateRequestPostmanCollection
      parameters:
        - description: The ID of the request to retrieve.
          in: path
          name: requestID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                title: PostmanCollection
                type: string
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Generate a Postman collection for a particular request.
      tags:
        - Requests
      x-codeSamples:
        - label: generateRequestPostmanCollection
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.requests.generateRequestPostmanCollection("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: generateRequestPostmanCollection
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GenerateRequestPostmanCollectionRequest{
                    RequestID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Requests.GenerateRequestPostmanCollection(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PostmanCollection != nil {
                    // handle response
                }
            }
  /v1/eventlog/query:
    get:
      description: |-
        Supports retrieving a list of request captured by the SDK for this workspace.
        Allows the filtering of requests on a number of criteria such as ApiID, VersionID, Path, Method, etc.
      operationId: queryEventLog
      parameters:
        - content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filters'
          description: The filter to apply to the query.
          in: query
          name: filters
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BoundedRequest'
                title: BoundedRequests
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Query the event log to retrieve a list of requests.
      tags:
        - Requests
      x-codeSamples:
        - label: queryEventLog
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.requests.queryEventLog({
                filters: [
                  {
                    key: "<key>",
                    operator: "<value>",
                    value: "<value>",
                  },
                ],
                limit: 241978,
                offset: 451388,
                operator: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: queryEventLog
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.QueryEventLogRequest{}
                ctx := context.Background()
                res, err := s.Requests.QueryEventLog(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.BoundedRequests != nil {
                    // handle response
                }
            }
  /v1/github/action:
    get:
      operationId: getAction
      parameters:
        - description: The targetName of the workflow target.
          in: query
          name: targetName
          schema:
            type: string
        - in: query
          name: org
          required: true
          schema:
            type: string
        - in: query
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubGetActionResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: getAction
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.getAction("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getAction
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetActionRequest{
                    Org: "<value>",
                    Repo: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.GetAction(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubGetActionResponse != nil {
                    // handle response
                }
            }
  /v1/github/check_access:
    get:
      operationId: checkAccess
      parameters:
        - in: query
          name: org
          required: true
          schema:
            type: string
        - in: query
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: checkAccess
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.checkAccess("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: checkAccess
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.CheckAccessRequest{
                    Org: "<value>",
                    Repo: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.CheckAccess(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/github/configure_code_samples:
    post:
      operationId: configureCodeSamples
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubConfigureCodeSamplesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubConfigureCodeSamplesResponse'
                required: true
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: configureCodeSamples
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.configureCodeSamples({
                org: "<value>",
                repo: "<value>",
                targetName: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: configureCodeSamples
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubConfigureCodeSamplesRequest{
                    Org: "<value>",
                    Repo: "<value>",
                    TargetName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.ConfigureCodeSamples(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubConfigureCodeSamplesResponse != nil {
                    // handle response
                }
            }
  /v1/github/configure_mintlify_repo:
    post:
      operationId: configureMintlifyRepo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubConfigureMintlifyRepoRequest'
        required: true
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: configureMintlifyRepo
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.configureMintlifyRepo({
                org: "<value>",
                repo: "<value>",
                input: "<value>",
                overlays: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: configureMintlifyRepo
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubConfigureMintlifyRepoRequest{
                    Org: "<value>",
                    Repo: "<value>",
                    Input: "<value>",
                    Overlays: []string{
                        "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Github.ConfigureMintlifyRepo(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/github/configure_target:
    post:
      operationId: configureTarget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubConfigureTargetRequest'
        required: true
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: configureTarget
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.configureTarget({
                org: "<value>",
                repoName: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: configureTarget
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubConfigureTargetRequest{
                    Org: "<value>",
                    RepoName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.ConfigureTarget(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/github/publishing_prs:
    get:
      operationId: fetchPublishingPRs
      parameters:
        - in: query
          name: generate_gen_lock_id
          required: true
          schema:
            type: string
        - in: query
          name: org
          required: true
          schema:
            type: string
        - in: query
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubPublishingPRResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: fetchPublishingPRs
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.fetchPublishingPRs("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: fetchPublishingPRs
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.FetchPublishingPRsRequest{
                    GenerateGenLockID: "<value>",
                    Org: "<value>",
                    Repo: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.FetchPublishingPRs(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubPublishingPRResponse != nil {
                    // handle response
                }
            }
  /v1/github/publishing_secrets:
    get:
      operationId: githubCheckPublishingSecrets
      parameters:
        - in: query
          name: generate_gen_lock_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubMissingPublishingSecretsResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: githubCheckPublishingSecrets
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.githubCheckPublishingSecrets("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: githubCheckPublishingSecrets
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GithubCheckPublishingSecretsRequest{
                    GenerateGenLockID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.GithubCheckPublishingSecrets(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubMissingPublishingSecretsResponse != nil {
                    // handle response
                }
            }
    post:
      operationId: githubStorePublishingSecrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubStorePublishingSecretsRequest'
        required: true
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: githubStorePublishingSecrets
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.githubStorePublishingSecrets({
                generateGenLockId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: githubStorePublishingSecrets
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubStorePublishingSecretsRequest{
                    GenerateGenLockID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.GithubStorePublishingSecrets(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/github/trigger_action:
    post:
      operationId: triggerAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubTriggerActionRequest'
        required: true
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      tags:
        - Github
      x-codeSamples:
        - label: triggerAction
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.github.triggerAction({
                org: "<value>",
                repoName: "<value>",
                genLockId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: triggerAction
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubTriggerActionRequest{
                    Org: "<value>",
                    RepoName: "<value>",
                    GenLockID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.TriggerAction(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/oci/v2/{organization_slug}/{workspace_slug}/{namespace_name}/blobs/{digest}:
    get:
      operationId: getBlob
      parameters:
        - in: path
          name: organization_slug
          required: true
          schema:
            type: string
        - in: path
          name: workspace_slug
          required: true
          schema:
            type: string
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - in: path
          name: digest
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                title: Blob
                type: string
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get blob for a particular digest
      tags:
        - Artifacts
      x-codeSamples:
        - label: getBlob
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.getBlob("<value>", "<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getBlob
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetBlobRequest{
                    OrganizationSlug: "<value>",
                    WorkspaceSlug: "<value>",
                    NamespaceName: "<value>",
                    Digest: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetBlob(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Blob != nil {
                    // handle response
                }
            }
  /v1/oci/v2/{organization_slug}/{workspace_slug}/{namespace_name}/manifests/{revision_reference}:
    get:
      operationId: getManifest
      parameters:
        - in: header
          name: Accept
          required: true
          schema:
            type: string
        - in: path
          name: organization_slug
          required: true
          schema:
            type: string
        - in: path
          name: workspace_slug
          required: true
          schema:
            type: string
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - description: Tag or digest
          in: path
          name: revision_reference
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/vnd.oci.image.manifest.v1+json:
              schema:
                $ref: '#/components/schemas/Manifest'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get manifest for a particular reference
      tags:
        - Artifacts
      x-codeSamples:
        - label: getManifest
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.artifacts.getManifest("<value>", "<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getManifest
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetManifestRequest{
                    OrganizationSlug: "<value>",
                    WorkspaceSlug: "<value>",
                    NamespaceName: "<value>",
                    RevisionReference: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetManifest(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Manifest != nil {
                    // handle response
                }
            }
  /v1/organization:
    get:
      description: Returns a list of organizations a user has access too
      operationId: getOrganizations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                title: Organizations
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get organizations for a user
      tags:
        - Organizations
      x-codeSamples:
        - label: getOrganizations
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.organizations.getOrganizations();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getOrganizations
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Organizations.GetOrganizations(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Organizations != nil {
                    // handle response
                }
            }
  /v1/organization/free_trial:
    post:
      description: Creates a free trial for an organization
      operationId: createFreeTrial
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Create a free trial for an organization
      tags:
        - Organizations
      x-codeSamples:
        - label: createFreeTrial
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.organizations.createFreeTrial();

              // Handle the result
              console.log(result)
            }

            run();
        - label: createFreeTrial
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Organizations.CreateFreeTrial(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/organization/usage:
    get:
      description: Returns a billing usage summary by target languages for a particular organization
      operationId: getOrganizationUsage
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUsageResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get billing usage summary for a particular organization
      tags:
        - Organizations
      x-codeSamples:
        - label: getOrganizationUsage
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.organizations.getOrganizationUsage();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getOrganizationUsage
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Organizations.GetOrganizationUsage(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.OrganizationUsageResponse != nil {
                    // handle response
                }
            }
  /v1/reports:
    post:
      operationId: uploadReport
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/Report'
                file:
                  format: binary
                  type: string
              required:
                - data
                - file
              type: object
        description: The report file to upload provided as a multipart/form-data file segment.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                required:
                  - url
                title: uploadedReport
                type: object
          description: OK
      summary: Upload a report.
      tags:
        - Reports
      x-codeSamples:
        - label: uploadReport
          lang: typescript
          source: |-
            import { openAsBlob } from "node:fs";
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.reports.uploadReport({
                data: {},
                file: await openAsBlob("./sample-file"),
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: uploadReport
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.UploadReportRequestBody{
                    Data: shared.Report{},
                    File: operations.UploadReportFile{
                        FileName: "your_file_here",
                        Content: []byte("0xA329C0ad85"),
                    },
                }
                ctx := context.Background()
                res, err := s.Reports.UploadReport(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UploadedReport != nil {
                    // handle response
                }
            }
  /v1/reports/changes/{documentChecksum}:
    get:
      operationId: getChangesReportSignedUrl
      parameters:
        - description: The checksum of the document to retrieve the signed access url for.
          in: path
          name: documentChecksum
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                required:
                  - url
                title: signedAccess
                type: object
          description: OK
      summary: Get the signed access url for the change reports for a particular document.
      tags:
        - Reports
      x-codeSamples:
        - label: getChangesReportSignedUrl
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.reports.getChangesReportSignedUrl("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getChangesReportSignedUrl
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetChangesReportSignedURLRequest{
                    DocumentChecksum: "<value>",
                }
                ctx := context.Background()
                res, err := s.Reports.GetChangesReportSignedURL(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SignedAccess != nil {
                    // handle response
                }
            }
  /v1/reports/linting/{documentChecksum}:
    get:
      operationId: getLintingReportSignedUrl
      parameters:
        - description: The checksum of the document to retrieve the signed access url for.
          in: path
          name: documentChecksum
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                required:
                  - url
                title: signedAccess
                type: object
          description: OK
      summary: Get the signed access url for the linting reports for a particular document.
      tags:
        - Reports
      x-codeSamples:
        - label: getLintingReportSignedUrl
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.reports.getLintingReportSignedUrl("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getLintingReportSignedUrl
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetLintingReportSignedURLRequest{
                    DocumentChecksum: "<value>",
                }
                ctx := context.Background()
                res, err := s.Reports.GetLintingReportSignedURL(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SignedAccess != nil {
                    // handle response
                }
            }
  /v1/suggest/operation_ids:
    post:
      description: Get suggestions from an LLM model for improving the operationIDs in the provided schema.
      operationId: suggestOperationIDs
      parameters:
        - in: header
          name: x-session-id
          required: true
          schema:
            type: string
        - description: Max number of suggestions to request
          in: query
          name: limit
          schema:
            type: number
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                opts:
                  $ref: '#/components/schemas/SuggestOperationIDsOpts'
                schema:
                  format: binary
                  type: string
              required:
                - schema
              type: object
        description: The schema file to upload provided as a multipart/form-data file segment.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestedOperationIDs'
          description: OK
      summary: Generate operation ID suggestions.
      tags:
        - Suggest
      x-codeSamples:
        - label: suggestOperationIDs
          lang: typescript
          source: |-
            import { openAsBlob } from "node:fs";
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.suggest.suggestOperationIDs("<value>", {
                schema: await openAsBlob("./sample-file"),
              }, 5363.33);

              // Handle the result
              console.log(result)
            }

            run();
        - label: suggestOperationIDs
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.SuggestOperationIDsRequest{
                    XSessionID: "<value>",
                    RequestBody: operations.SuggestOperationIDsRequestBody{
                        Schema: operations.Schema{
                            FileName: "your_file_here",
                            Content: []byte("0xb2de88c98a"),
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Suggest.SuggestOperationIDs(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SuggestedOperationIDs != nil {
                    // handle response
                }
            }
  /v1/suggest/operation_ids/{namespace_name}/{revision_reference}:
    post:
      description: Get suggestions from an LLM model for improving the operationIDs in the provided schema.
      operationId: suggestOperationIDsRegistry
      parameters:
        - in: header
          name: x-session-id
          required: true
          schema:
            type: string
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - description: Tag or digest
          in: path
          name: revision_reference
          required: true
          schema:
            type: string
        - description: Max number of suggestions to request
          in: query
          name: limit
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestOperationIDsOpts'
        description: The schema file to upload provided as a multipart/form-data file segment.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestedOperationIDs'
          description: OK
      summary: Generate operation ID suggestions.
      tags:
        - Suggest
      x-codeSamples:
        - label: suggestOperationIDsRegistry
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.suggest.suggestOperationIDsRegistry({
                xSessionId: "<value>",
                namespaceName: "<value>",
                revisionReference: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: suggestOperationIDsRegistry
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.SuggestOperationIDsRegistryRequest{
                    NamespaceName: "<value>",
                    RevisionReference: "<value>",
                    XSessionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Suggest.SuggestOperationIDsRegistry(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SuggestedOperationIDs != nil {
                    // handle response
                }
            }
  /v1/suggest/operation_ids/apply:
    post:
      operationId: applyOperationIDs
      parameters:
        - in: header
          name: x-session-id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                as_overlay:
                  description: 'Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false'
                  type: boolean
              type: object
        description: Apply options
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                title: Schema
                type: string
            application/x-yaml:
              schema:
                format: binary
                title: Schema
                type: string
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Apply operation ID suggestions and download result.
      tags:
        - Suggest
      x-codeSamples:
        - label: applyOperationIDs
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.suggest.applyOperationIDs("<value>", {});

              // Handle the result
              console.log(result)
            }

            run();
        - label: applyOperationIDs
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.ApplyOperationIDsRequest{
                    XSessionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Suggest.ApplyOperationIDs(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONSchema != nil {
                    // handle response
                }
            }
  /v1/user:
    get:
      operationId: getUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get information about the current user.
      tags:
        - Auth
      x-codeSamples:
        - label: getUser
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.auth.getUser();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getUser
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Auth.GetUser(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.User != nil {
                    // handle response
                }
            }
  /v1/workspace/{workspaceID}/events:
    get:
      description: Search events for a particular workspace by any field
      operationId: searchWorkspaceEvents
      parameters:
        - description: Unique identifier of the source revision digest.
          in: query
          name: source_revision_digest
          required: false
          schema:
            type: string
        - description: Unique identifier of the lint report digest.
          in: query
          name: lint_report_digest
          required: false
          schema:
            type: string
        - description: Unique identifier of the openapi diff report digest.
          in: query
          name: openapi_diff_report_digest
          required: false
          schema:
            type: string
        - description: Specified interaction type for events.
          in: query
          name: interaction_type
          required: false
          schema:
            $ref: '#/components/schemas/InteractionType'
        - description: A specific gen lock ID for the events.
          in: query
          name: generate_gen_lock_id
          required: false
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CliEventBatch'
          description: Success
        5XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      tags:
        - Events
      x-codeSamples:
        - label: searchWorkspaceEvents
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.events.searchWorkspaceEvents({});

              // Handle the result
              console.log(result)
            }

            run();
        - label: searchWorkspaceEvents
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.SearchWorkspaceEventsRequest{}
                ctx := context.Background()
                res, err := s.Events.SearchWorkspaceEvents(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CliEventBatch != nil {
                    // handle response
                }
            }
    parameters:
      - description: Unique identifier of the workspace.
        in: path
        name: workspaceID
        required: true
        schema:
          type: string
    post:
      description: Sends an array of events to be stored for a particular workspace.
      operationId: postWorkspaceEvents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CliEventBatch'
        required: true
      responses:
        2XX:
          description: Success
        5XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Post events for a specific workspace
      tags:
        - Events
      x-codeSamples:
        - label: postWorkspaceEvents
          lang: typescript
          source: |-
            import { SDK } from "petstore";
            import { InteractionType } from "petstore/models/components";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.events.postWorkspaceEvents([
                {
                  id: "<id>",
                  executionId: "<value>",
                  workspaceId: "<value>",
                  speakeasyApiKeyName: "<value>",
                  interactionType: InteractionType.Publish,
                  localStartedAt: new Date("2022-05-18T11:28:11.328Z"),
                  createdAt: new Date("2024-05-07T12:35:47.182Z"),
                  speakeasyVersion: "<value>",
                  success: false,
                },
              ], "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: postWorkspaceEvents
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/types"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.PostWorkspaceEventsRequest{
                    RequestBody: []shared.CliEvent{
                        shared.CliEvent{
                            ID: "<id>",
                            ExecutionID: "<value>",
                            WorkspaceID: "<value>",
                            SpeakeasyAPIKeyName: "<value>",
                            InteractionType: shared.InteractionTypePublish,
                            LocalStartedAt: types.MustTimeFromString("2022-05-18T11:28:11.328Z"),
                            CreatedAt: types.MustTimeFromString("2024-05-07T12:35:47.182Z"),
                            SpeakeasyVersion: "<value>",
                            Success: false,
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Events.PostWorkspaceEvents(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
      x-speakeasy-retries:
        backoff:
          exponent: 1.5
          initialInterval: 100
          maxElapsedTime: 60000
          maxInterval: 2000
        retryConnectionErrors: true
        statusCodes:
          - 408
          - 500
          - 502
          - 503
        strategy: backoff
  /v1/workspace/{workspaceID}/events/targets:
    get:
      description: Load targets for a particular workspace
      operationId: getWorkspaceTargets
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetSDKList'
          description: Success
        5XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      tags:
        - Events
      x-codeSamples:
        - label: getWorkspaceTargets
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.events.getWorkspaceTargets("<value>", new Date("2024-11-24T17:59:46.647Z"));

              // Handle the result
              console.log(result)
            }

            run();
        - label: getWorkspaceTargets
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetWorkspaceTargetsRequest{}
                ctx := context.Background()
                res, err := s.Events.GetWorkspaceTargets(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TargetSDKList != nil {
                    // handle response
                }
            }
    parameters:
      - description: Unique identifier of the workspace.
        in: path
        name: workspaceID
        required: true
        schema:
          type: string
      - description: Filter to only return targets with events created after this timestamp
        in: query
        name: after_last_event_created_at
        required: false
        schema:
          format: date-time
          type: string
  /v1/workspace/{workspaceID}/events/targets/{targetID}/events:
    get:
      description: Load recent events for a particular workspace
      operationId: getWorkspaceEventsByTarget
      parameters:
        - description: Unique identifier of the workspace.
          in: path
          name: workspaceID
          required: true
          schema:
            type: string
        - description: Filter to only return events corresponding to a particular gen_lock_id (gen_lock_id uniquely identifies a target)
          in: path
          name: targetID
          required: true
          schema:
            type: string
        - description: Filter to only return events created after this timestamp
          in: query
          name: after_created_at
          required: false
          schema:
            format: date-time
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CliEventBatch'
          description: Success
        5XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      tags:
        - Events
      x-codeSamples:
        - label: getWorkspaceEventsByTarget
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.events.getWorkspaceEventsByTarget("<value>", "<value>", new Date("2024-04-01T04:00:29.393Z"));

              // Handle the result
              console.log(result)
            }

            run();
        - label: getWorkspaceEventsByTarget
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetWorkspaceEventsByTargetRequest{
                    TargetID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Events.GetWorkspaceEventsByTarget(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CliEventBatch != nil {
                    // handle response
                }
            }
  /v1/workspace/access:
    get:
      description: Checks if generation is permitted for a particular run of the CLI
      operationId: getWorkspaceAccess
      parameters:
        - description: Unique identifier of the generation target.
          in: query
          name: genLockId
          schema:
            type: string
        - description: The type of the generated target.
          in: query
          name: targetType
          schema:
            type: string
        - description: Skip side-effects like incrementing metrics.
          in: query
          name: passive
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDetails'
          description: OK
      summary: Get access allowances for a particular workspace
      tags:
        - Auth
      x-codeSamples:
        - label: getWorkspaceAccess
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.auth.getWorkspaceAccess("<value>", "<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
        - label: getWorkspaceAccess
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetWorkspaceAccessRequest{}
                ctx := context.Background()
                res, err := s.Auth.GetWorkspaceAccess(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.AccessDetails != nil {
                    // handle response
                }
            }
      x-speakeasy-retries:
        backoff:
          exponent: 1.5
          initialInterval: 100
          maxElapsedTime: 60000
          maxInterval: 2000
        retryConnectionErrors: true
        statusCodes:
          - 408
          - 500
          - 502
          - 503
        strategy: backoff
  /v1/workspace/embed-access-token:
    get:
      description: |-
        Returns an embed access token for the current workspace. This can be used to authenticate access to externally embedded content.
        Filters can be applied allowing views to be filtered to things like particular customerIds.
      operationId: getEmbedAccessToken
      parameters:
        - description: The description of the embed access token.
          in: query
          name: description
          required: false
          schema:
            type: string
        - description: The duration (in minutes) of the embed access token.
          in: query
          name: duration
          required: false
          schema:
            type: integer
        - content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filters'
          description: The filter to apply to the query.
          in: query
          name: filters
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedAccessTokenResponse'
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get an embed access token for the current workspace.
      tags:
        - Embeds
      x-codeSamples:
        - label: getEmbedAccessToken
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.embeds.getEmbedAccessToken("<value>", 964408, {
                filters: [
                  {
                    key: "<key>",
                    operator: "<value>",
                    value: "<value>",
                  },
                ],
                limit: 95617,
                offset: 577742,
                operator: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: getEmbedAccessToken
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetEmbedAccessTokenRequest{}
                ctx := context.Background()
                res, err := s.Embeds.GetEmbedAccessToken(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EmbedAccessTokenResponse != nil {
                    // handle response
                }
            }
  /v1/workspace/embed-access-tokens/{tokenID}:
    delete:
      operationId: revokeEmbedAccessToken
      parameters:
        - description: The ID of the EmbedToken to revoke.
          in: path
          name: tokenID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Revoke an embed access EmbedToken.
      tags:
        - Embeds
      x-codeSamples:
        - label: revokeEmbedAccessToken
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.embeds.revokeEmbedAccessToken("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: revokeEmbedAccessToken
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.RevokeEmbedAccessTokenRequest{
                    TokenID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Embeds.RevokeEmbedAccessToken(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  /v1/workspace/embed-access-tokens/valid:
    get:
      operationId: getValidEmbedAccessTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EmbedToken'
                title: EmbedTokens
                type: array
          description: OK
        default:
          $ref: '#/components/responses/default'
      summary: Get all valid embed access tokens for the current workspace.
      tags:
        - Embeds
      x-codeSamples:
        - label: getValidEmbedAccessTokens
          lang: typescript
          source: |-
            import { SDK } from "petstore";

            const sdk = new SDK({
              security: {
                apiKey: "<YOUR_API_KEY_HERE>",
              },
            });

            async function run() {
              const result = await sdk.embeds.getValidEmbedAccessTokens();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getValidEmbedAccessTokens
          lang: go
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Embeds.GetValidEmbedAccessTokens(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EmbedTokens != nil {
                    // handle response
                }
            }
security:
  - APIKey: []
  - Bearer: []
servers:
  - url: https://api.prod.speakeasyapi.dev
    x-speakeasy-server-id: prod
tags:
  - description: REST APIs for managing Authentication
    name: Auth
  - description: REST APIs for managing Api entities
    name: Apis
  - description: REST APIs for managing ApiEndpoint entities
    name: ApiEndpoints
  - description: REST APIs for managing Version Metadata entities
    name: Metadata
  - description: REST APIs for managing Schema entities
    name: Schemas
  - description: REST APIs for retrieving request information
    name: Requests
  - description: REST APIs for managing embeds
    name: Embeds
  - description: REST APIs for capturing event data
    name: Events
  - description: REST APIs for managing reports
    name: Reports
  - description: REST APIs for managing LLM OAS suggestions
    name: Suggest
  - description: REST APIs for working with Registry artifacts
    name: Artifacts
x-speakeasy-globals:
  parameters:
    - in: path
      name: workspaceID
      schema:
        type: string
