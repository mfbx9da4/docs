openapi: 3.0.3
info:
  description: The Speakeasy API allows teams to manage common operations with their APIs
  title: Speakeasy API
  version: 0.4.0 .
servers:
  - url: https://api.prod.speakeasyapi.dev
    x-speakeasy-server-id: prod
x-speakeasy-globals:
  parameters:
    - name: workspaceID
      in: path
      schema:
        type: string
security:
  - APIKey: []
  - Bearer: []
tags:
  - description: REST APIs for managing Authentication
    name: Auth
  - description: REST APIs for managing Api entities
    name: Apis
  - description: REST APIs for managing ApiEndpoint entities
    name: ApiEndpoints
  - description: REST APIs for managing Version Metadata entities
    name: Metadata
  - description: REST APIs for managing Schema entities
    name: Schemas
  - description: REST APIs for retrieving request information
    name: Requests
  - description: REST APIs for managing embeds
    name: Embeds
  - description: REST APIs for capturing event data
    name: Events
  - description: REST APIs for managing reports
    name: Reports
  - description: REST APIs for managing LLM OAS suggestions
    name: Suggest
  - description: REST APIs for working with Registry artifacts
    name: Artifacts
  - name: ShortURLs
    description: REST APIs for managing short URLs
externalDocs:
  url: /docs
  description: The Speakeasy Platform Documentation
paths:
  /v1/apis:
    get:
      summary: Get a list of Apis for a given workspace
      description: |-
        Get a list of all Apis and their versions for a given workspace.
        Supports filtering the APIs based on metadata attributes.
      operationId: getApis
      x-speakeasy-usage-example: true
      parameters:
        - description: Configuration for filter operations
          explode: true
          in: query
          name: op
          required: false
          schema:
            properties:
              and:
                description: Whether to AND or OR the filters
                type: boolean
            required:
              - and
            type: object
          style: deepObject
        - description: Metadata to filter Apis on
          explode: true
          in: query
          name: metadata
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            description: Map of metadata key/values to filter on
            type: object
          style: deepObject
      responses:
        "200":
          content:
            application/json:
              x-speakeasy-usage-example: true
              schema:
                title: Apis
                description: A list of Apis for the given workspace
                items:
                  $ref: "#/components/schemas/Api"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Apis
      x-codeSamples:
        - lang: go
          label: getApis
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetApisRequest{}
                ctx := context.Background()
                res, err := s.Apis.GetApis(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Apis != nil {
                    // handle response
                }
            }
        - lang: java
          label: getApis
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetApisRequest req = GetApisRequest.builder()
                            .build();

                        GetApisResponse res = sdk.apis().getApis()
                            .request(req)
                            .call();

                        if (res.apis().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}:
    get:
      summary: Get all Api versions for a particular ApiEndpoint.
      description: |-
        Get all Api versions for a particular ApiEndpoint.
        Supports filtering the versions based on metadata attributes.
      operationId: getAllApiVersions
      parameters:
        - description: The ID of the Api to retrieve.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: Configuration for filter operations
          explode: true
          in: query
          name: op
          schema:
            properties:
              and:
                description: Whether to AND or OR the filters
                type: boolean
            required:
              - and
            type: object
          style: deepObject
        - description: Metadata to filter Apis on
          explode: true
          in: query
          name: metadata
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            description: Map of metadata key/values to filter on
            type: object
          style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Apis
                description: A list of Api versions for the given apiID
                items:
                  $ref: "#/components/schemas/Api"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Apis
      x-codeSamples:
        - lang: go
          label: getAllApiVersions
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAllAPIVersionsRequest{
                    APIID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.GetAllAPIVersions(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Apis != nil {
                    // handle response
                }
            }
        - lang: java
          label: getAllApiVersions
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetAllApiVersionsRequest req = GetAllApiVersionsRequest.builder()
                            .apiID("<value>")
                            .build();

                        GetAllApiVersionsResponse res = sdk.apis().getAllApiVersions()
                            .request(req)
                            .call();

                        if (res.apis().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    put:
      summary: Upsert an Api
      description: |-
        Upsert an Api. If the Api does not exist, it will be created.
        If the Api exists, it will be updated.
      operationId: upsertApi
      parameters:
        - description: The ID of the Api to upsert.
          in: path
          name: apiID
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON representation of the Api to upsert
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Api"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Api"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Apis
      x-codeSamples:
        - lang: go
          label: upsertApi
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.UpsertAPIRequest{
                    APIID: "<value>",
                    API: shared.APIInput{
                        APIID: "<value>",
                        Description: "Synchronised 5th generation knowledge user",
                        VersionID: "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Apis.UpsertAPI(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.API != nil {
                    // handle response
                }
            }
        - lang: java
          label: upsertApi
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        UpsertApiRequest req = UpsertApiRequest.builder()
                            .apiID("<value>")
                            .api(ApiInput.builder()
                                    .apiId("<value>")
                                    .description("<value>")
                                    .versionId("<value>")
                                    .build())
                            .build();

                        UpsertApiResponse res = sdk.apis().upsertApi()
                            .request(req)
                            .call();

                        if (res.api().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/api_endpoints:
    get:
      summary: Get all Api endpoints for a particular apiID.
      operationId: getAllApiEndpoints
      parameters:
        - description: The ID of the Api to retrieve ApiEndpoints for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                title: ApiEndpoints
                items:
                  $ref: "#/components/schemas/ApiEndpoint"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: getAllApiEndpoints
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAllAPIEndpointsRequest{
                    APIID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GetAllAPIEndpoints(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoints != nil {
                    // handle response
                }
            }
        - lang: java
          label: getAllApiEndpoints
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetAllApiEndpointsRequest req = GetAllApiEndpointsRequest.builder()
                            .apiID("<value>")
                            .build();

                        GetAllApiEndpointsResponse res = sdk.apiEndpoints().getAllApiEndpoints()
                            .request(req)
                            .call();

                        if (res.apiEndpoints().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}:
    delete:
      summary: Delete an Api.
      description: |-
        Delete a particular version of an Api. The will also delete all associated ApiEndpoints, Metadata, Schemas & Request Logs (if using a Postgres datastore).
      operationId: deleteApi
      parameters:
        - description: The ID of the Api to delete.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Apis
      x-codeSamples:
        - lang: go
          label: deleteApi
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteAPIRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.DeleteAPI(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: deleteApi
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        DeleteApiRequest req = DeleteApiRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        DeleteApiResponse res = sdk.apis().deleteApi()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints:
    get:
      summary: Get all ApiEndpoints for a particular apiID and versionID.
      operationId: getAllForVersionApiEndpoints
      parameters:
        - description: The ID of the Api to retrieve ApiEndpoints for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to retrieve ApiEndpoints for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                title: APIEndpoints
                items:
                  $ref: "#/components/schemas/ApiEndpoint"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: getAllForVersionApiEndpoints
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAllForVersionAPIEndpointsRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GetAllForVersionAPIEndpoints(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoints != nil {
                    // handle response
                }
            }
        - lang: java
          label: getAllForVersionApiEndpoints
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetAllForVersionApiEndpointsRequest req = GetAllForVersionApiEndpointsRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        GetAllForVersionApiEndpointsResponse res = sdk.apiEndpoints().getAllForVersionApiEndpoints()
                            .request(req)
                            .call();

                        if (res.apiEndpoints().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/find/{displayName}:
    get:
      summary: Find an ApiEndpoint via its displayName.
      description: |-
        Find an ApiEndpoint via its displayName (set by operationId from a registered OpenAPI schema).
        This is useful for finding the ID of an ApiEndpoint to use in the /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID} endpoints.
      operationId: findApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The displayName of the ApiEndpoint to find (set by operationId from OpenAPI schema).
          in: path
          name: displayName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiEndpoint"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: findApiEndpoint
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.FindAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    DisplayName: "Don.Strosin",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.FindAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoint != nil {
                    // handle response
                }
            }
        - lang: java
          label: findApiEndpoint
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        FindApiEndpointRequest req = FindApiEndpointRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .displayName("<value>")
                            .build();

                        FindApiEndpointResponse res = sdk.apiEndpoints().findApiEndpoint()
                            .request(req)
                            .call();

                        if (res.apiEndpoint().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}:
    delete:
      summary: Delete an ApiEndpoint.
      description: |-
        Delete an ApiEndpoint. This will also delete all associated Request Logs (if using a Postgres datastore).
      operationId: deleteApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to delete.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: deleteApiEndpoint
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.DeleteAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: deleteApiEndpoint
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        DeleteApiEndpointRequest req = DeleteApiEndpointRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .apiEndpointID("<value>")
                            .build();

                        DeleteApiEndpointResponse res = sdk.apiEndpoints().deleteApiEndpoint()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    get:
      summary: Get an ApiEndpoint.
      operationId: getApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to retrieve.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiEndpoint"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: getApiEndpoint
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GetAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoint != nil {
                    // handle response
                }
            }
        - lang: java
          label: getApiEndpoint
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetApiEndpointRequest req = GetApiEndpointRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .apiEndpointID("<value>")
                            .build();

                        GetApiEndpointResponse res = sdk.apiEndpoints().getApiEndpoint()
                            .request(req)
                            .call();

                        if (res.apiEndpoint().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    put:
      summary: Upsert an ApiEndpoint.
      description: |-
        Upsert an ApiEndpoint. If the ApiEndpoint does not exist it will be created, otherwise it will be updated.
      operationId: upsertApiEndpoint
      parameters:
        - description: The ID of the Api the ApiEndpoint belongs to.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api the ApiEndpoint belongs to.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to upsert.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON representation of the ApiEndpoint to upsert.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiEndpoint"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiEndpoint"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: upsertApiEndpoint
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.UpsertAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                    APIEndpoint: shared.APIEndpointInput{
                        APIEndpointID: "<value>",
                        Description: "Public-key systematic attitude",
                        DisplayName: "Camille.Schaefer11",
                        Method: "<value>",
                        Path: "/Library",
                        VersionID: "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.UpsertAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIEndpoint != nil {
                    // handle response
                }
            }
        - lang: java
          label: upsertApiEndpoint
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        UpsertApiEndpointRequest req = UpsertApiEndpointRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .apiEndpointID("<value>")
                            .apiEndpoint(ApiEndpointInput.builder()
                                    .apiEndpointId("<value>")
                                    .description("<value>")
                                    .displayName("<value>")
                                    .method("<value>")
                                    .path("<value>")
                                    .versionId("<value>")
                                    .build())
                            .build();

                        UpsertApiEndpointResponse res = sdk.apiEndpoints().upsertApiEndpoint()
                            .request(req)
                            .call();

                        if (res.apiEndpoint().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/openapi:
    get:
      summary: Generate an OpenAPI specification for a particular ApiEndpoint.
      description: |-
        This endpoint will generate a new operation in any registered OpenAPI document if the operation does not already exist in the document.
        Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
      operationId: generateOpenApiSpecForApiEndpoint
      parameters:
        - description: The ID of the Api to generate an OpenAPI specification for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate an OpenAPI specification for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to generate an OpenAPI specification for.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateOpenApiSpecDiff"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: generateOpenApiSpecForApiEndpoint
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GenerateOpenAPISpecForAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GenerateOpenAPISpecForAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GenerateOpenAPISpecDiff != nil {
                    // handle response
                }
            }
        - lang: java
          label: generateOpenApiSpecForApiEndpoint
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GenerateOpenApiSpecForApiEndpointRequest req = GenerateOpenApiSpecForApiEndpointRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .apiEndpointID("<value>")
                            .build();

                        GenerateOpenApiSpecForApiEndpointResponse res = sdk.apiEndpoints().generateOpenApiSpecForApiEndpoint()
                            .request(req)
                            .call();

                        if (res.generateOpenApiSpecDiff().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/api_endpoints/{apiEndpointID}/generate/postman:
    get:
      summary: Generate a Postman collection for a particular ApiEndpoint.
      description: |-
        Generates a postman collection that allows the endpoint to be called from postman variables produced for any path/query/header parameters included in the OpenAPI document.
      operationId: generatePostmanCollectionForApiEndpoint
      parameters:
        - description: The ID of the Api to generate a Postman collection for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate a Postman collection for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The ID of the ApiEndpoint to generate a Postman collection for.
          in: path
          name: apiEndpointID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                title: PostmanCollection
                type: string
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - ApiEndpoints
      x-codeSamples:
        - lang: go
          label: generatePostmanCollectionForApiEndpoint
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GeneratePostmanCollectionForAPIEndpointRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    APIEndpointID: "<value>",
                }
                ctx := context.Background()
                res, err := s.APIEndpoints.GeneratePostmanCollectionForAPIEndpoint(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PostmanCollection != nil {
                    // handle response
                }
            }
        - lang: java
          label: generatePostmanCollectionForApiEndpoint
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GeneratePostmanCollectionForApiEndpointRequest req = GeneratePostmanCollectionForApiEndpointRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .apiEndpointID("<value>")
                            .build();

                        GeneratePostmanCollectionForApiEndpointResponse res = sdk.apiEndpoints().generatePostmanCollectionForApiEndpoint()
                            .request(req)
                            .call();

                        if (res.postmanCollection().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/generate/openapi:
    get:
      summary: Generate an OpenAPI specification for a particular Api.
      description: |-
        This endpoint will generate any missing operations in any registered OpenAPI document if the operation does not already exist in the document.
        Returns the original document and the newly generated document allowing a diff to be performed to see what has changed.
      operationId: generateOpenApiSpec
      parameters:
        - description: The ID of the Api to generate an OpenAPI specification for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate an OpenAPI specification for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateOpenApiSpecDiff"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Apis
      x-codeSamples:
        - lang: go
          label: generateOpenApiSpec
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GenerateOpenAPISpecRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.GenerateOpenAPISpec(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GenerateOpenAPISpecDiff != nil {
                    // handle response
                }
            }
        - lang: java
          label: generateOpenApiSpec
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GenerateOpenApiSpecRequest req = GenerateOpenApiSpecRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        GenerateOpenApiSpecResponse res = sdk.apis().generateOpenApiSpec()
                            .request(req)
                            .call();

                        if (res.generateOpenApiSpecDiff().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/generate/postman:
    get:
      summary: Generate a Postman collection for a particular Api.
      description: |-
        Generates a postman collection containing all endpoints for a particular API. Includes variables produced for any path/query/header parameters included in the OpenAPI document.
      operationId: generatePostmanCollection
      parameters:
        - description: The ID of the Api to generate a Postman collection for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to generate a Postman collection for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                title: PostmanCollection
                type: string
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Apis
      x-codeSamples:
        - lang: go
          label: generatePostmanCollection
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GeneratePostmanCollectionRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Apis.GeneratePostmanCollection(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PostmanCollection != nil {
                    // handle response
                }
            }
        - lang: java
          label: generatePostmanCollection
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GeneratePostmanCollectionRequest req = GeneratePostmanCollectionRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        GeneratePostmanCollectionResponse res = sdk.apis().generatePostmanCollection()
                            .request(req)
                            .call();

                        if (res.postmanCollection().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/metadata:
    get:
      summary: Get all metadata for a particular apiID and versionID.
      operationId: getVersionMetadata
      parameters:
        - description: The ID of the Api to retrieve metadata for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to retrieve metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                title: VersionMetadata
                items:
                  $ref: "#/components/schemas/VersionMetadata"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Metadata
      x-codeSamples:
        - lang: go
          label: getVersionMetadata
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetVersionMetadataRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Metadata.GetVersionMetadata(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.VersionMetadata != nil {
                    // handle response
                }
            }
        - lang: java
          label: getVersionMetadata
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetVersionMetadataRequest req = GetVersionMetadataRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        GetVersionMetadataResponse res = sdk.metadata().getVersionMetadata()
                            .request(req)
                            .call();

                        if (res.versionMetadata().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    post:
      summary: Insert metadata for a particular apiID and versionID.
      operationId: insertVersionMetadata
      parameters:
        - description: The ID of the Api to insert metadata for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to insert metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON representation of the metadata to insert.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VersionMetadata"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionMetadata"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Metadata
      x-codeSamples:
        - lang: go
          label: insertVersionMetadata
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.InsertVersionMetadataRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    VersionMetadata: shared.VersionMetadataInput{
                        MetaKey: "<value>",
                        MetaValue: "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Metadata.InsertVersionMetadata(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.VersionMetadata != nil {
                    // handle response
                }
            }
        - lang: java
          label: insertVersionMetadata
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        InsertVersionMetadataRequest req = InsertVersionMetadataRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .versionMetadata(VersionMetadataInput.builder()
                                    .metaKey("<value>")
                                    .metaValue("<value>")
                                    .build())
                            .build();

                        InsertVersionMetadataResponse res = sdk.metadata().insertVersionMetadata()
                            .request(req)
                            .call();

                        if (res.versionMetadata().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/metadata/{metaKey}/{metaValue}:
    delete:
      summary: Delete metadata for a particular apiID and versionID.
      operationId: deleteVersionMetadata
      parameters:
        - description: The ID of the Api to delete metadata for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The key of the metadata to delete.
          in: path
          name: metaKey
          required: true
          schema:
            type: string
        - description: The value of the metadata to delete.
          in: path
          name: metaValue
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Metadata
      x-codeSamples:
        - lang: go
          label: deleteVersionMetadata
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteVersionMetadataRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    MetaKey: "<value>",
                    MetaValue: "<value>",
                }
                ctx := context.Background()
                res, err := s.Metadata.DeleteVersionMetadata(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: deleteVersionMetadata
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        DeleteVersionMetadataRequest req = DeleteVersionMetadataRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .metaKey("<value>")
                            .metaValue("<value>")
                            .build();

                        DeleteVersionMetadataResponse res = sdk.metadata().deleteVersionMetadata()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema:
    get:
      summary: Get information about the latest schema.
      description: "Returns information about the last uploaded schema for a particular API version. \nThis won't include the schema itself, that can be retrieved via the downloadSchema operation."
      operationId: getSchema
      parameters:
        - description: The ID of the Api to get the schema for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: getSchema
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Schema != nil {
                    // handle response
                }
            }
        - lang: java
          label: getSchema
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetSchemaRequest req = GetSchemaRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        GetSchemaResponse res = sdk.schemas().getSchema()
                            .request(req)
                            .call();

                        if (res.schema().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    post:
      summary: Register a schema.
      description: |-
        Allows uploading a schema for a particular API version.
        This will be used to populate ApiEndpoints and used as a base for any schema generation if present.
      operationId: registerSchema
      parameters:
        - description: The ID of the Api to get the schema for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      requestBody:
        description: The schema file to upload provided as a multipart/form-data file segment.
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
              required:
                - file
              type: object
        required: true
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: registerSchema
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.RegisterSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RequestBody: operations.RegisterSchemaRequestBody{
                        File: operations.File{
                            FileName: "your_file_here",
                            Content: []byte("0xCAFCA03e0e"),
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Schemas.RegisterSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: registerSchema
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        RegisterSchemaRequest req = RegisterSchemaRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .requestBody(RegisterSchemaRequestBody.builder()
                                    .file(File.builder()
                                            .fileName("<value>")
                                            .content("0xCAFCA03e0e".getBytes())
                                            .build())
                                    .build())
                            .build();

                        RegisterSchemaResponse res = sdk.schemas().registerSchema()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/download:
    get:
      summary: Download the latest schema for a particular apiID.
      operationId: downloadSchema
      parameters:
        - description: The ID of the Api to download the schema for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                title: Schema
                type: string
            application/x-yaml:
              schema:
                format: binary
                title: Schema
                type: string
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: downloadSchema
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DownloadSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.DownloadSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONSchema != nil {
                    // handle response
                }
            }
        - lang: java
          label: downloadSchema
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        DownloadSchemaRequest req = DownloadSchemaRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        DownloadSchemaResponse res = sdk.schemas().downloadSchema()
                            .request(req)
                            .call();

                        if (res.twoHundredApplicationJsonSchema().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/{baseRevisionID}/diff/{targetRevisionID}:
    get:
      summary: Get a diff of two schema revisions for an Api.
      operationId: getSchemaDiff
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The base revision ID of the schema to retrieve.
          in: path
          name: baseRevisionID
          required: true
          schema:
            type: string
        - description: The target revision ID of the schema to retrieve.
          in: path
          name: targetRevisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDiff"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: getSchemaDiff
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemaDiffRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    BaseRevisionID: "<value>",
                    TargetRevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchemaDiff(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SchemaDiff != nil {
                    // handle response
                }
            }
        - lang: java
          label: getSchemaDiff
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetSchemaDiffRequest req = GetSchemaDiffRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .baseRevisionID("<value>")
                            .targetRevisionID("<value>")
                            .build();

                        GetSchemaDiffResponse res = sdk.schemas().getSchemaDiff()
                            .request(req)
                            .call();

                        if (res.schemaDiff().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/{revisionID}:
    delete:
      summary: Delete a particular schema revision for an Api.
      operationId: deleteSchema
      parameters:
        - description: The ID of the Api to delete schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The revision ID of the schema to delete.
          in: path
          name: revisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: deleteSchema
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DeleteSchemaRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.DeleteSchema(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: deleteSchema
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        DeleteSchemaRequest req = DeleteSchemaRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .revisionID("<value>")
                            .build();

                        DeleteSchemaResponse res = sdk.schemas().deleteSchema()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    get:
      summary: Get information about a particular schema revision for an Api.
      description: "Returns information about the last uploaded schema for a particular schema revision. \nThis won't include the schema itself, that can be retrieved via the downloadSchema operation."
      operationId: getSchemaRevision
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The revision ID of the schema to retrieve.
          in: path
          name: revisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: getSchemaRevision
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemaRevisionRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchemaRevision(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Schema != nil {
                    // handle response
                }
            }
        - lang: java
          label: getSchemaRevision
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetSchemaRevisionRequest req = GetSchemaRevisionRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .revisionID("<value>")
                            .build();

                        GetSchemaRevisionResponse res = sdk.schemas().getSchemaRevision()
                            .request(req)
                            .call();

                        if (res.schema().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/schema/{revisionID}/download:
    get:
      summary: Download a particular schema revision for an Api.
      operationId: downloadSchemaRevision
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
        - description: The revision ID of the schema to retrieve.
          in: path
          name: revisionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                title: Schema
                type: string
            application/x-yaml:
              schema:
                format: binary
                title: Schema
                type: string
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: downloadSchemaRevision
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.DownloadSchemaRevisionRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                    RevisionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.DownloadSchemaRevision(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONSchema != nil {
                    // handle response
                }
            }
        - lang: java
          label: downloadSchemaRevision
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        DownloadSchemaRevisionRequest req = DownloadSchemaRevisionRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .revisionID("<value>")
                            .build();

                        DownloadSchemaRevisionResponse res = sdk.schemas().downloadSchemaRevision()
                            .request(req)
                            .call();

                        if (res.twoHundredApplicationJsonSchema().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/apis/{apiID}/version/{versionID}/schemas:
    get:
      summary: Get information about all schemas associated with a particular apiID.
      description: "Returns information the schemas associated with a particular apiID. \nThis won't include the schemas themselves, they can be retrieved via the downloadSchema operation."
      operationId: getSchemas
      parameters:
        - description: The ID of the Api to retrieve schemas for.
          in: path
          name: apiID
          required: true
          schema:
            type: string
        - description: The version ID of the Api to delete metadata for.
          in: path
          name: versionID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Schema"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Schemas
      x-codeSamples:
        - lang: go
          label: getSchemas
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetSchemasRequest{
                    APIID: "<value>",
                    VersionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Schemas.GetSchemas(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Schemata != nil {
                    // handle response
                }
            }
        - lang: java
          label: getSchemas
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetSchemasRequest req = GetSchemasRequest.builder()
                            .apiID("<value>")
                            .versionID("<value>")
                            .build();

                        GetSchemasResponse res = sdk.schemas().getSchemas()
                            .request(req)
                            .call();

                        if (res.schemata().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/auth/validate:
    get:
      summary: Validate the current api key.
      operationId: validateApiKey
      tags:
        - Auth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyDetails"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: validateApiKey
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Auth.ValidateAPIKey(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.APIKeyDetails != nil {
                    // handle response
                }
            }
        - lang: java
          label: validateApiKey
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        ValidateApiKeyResponse res = sdk.auth().validateApiKey()
                            .call();

                        if (res.apiKeyDetails().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/user:
    get:
      summary: Get information about the current user.
      operationId: getUser
      tags:
        - Auth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getUser
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Auth.GetUser(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.User != nil {
                    // handle response
                }
            }
        - lang: java
          label: getUser
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetUserResponse res = sdk.auth().getUser()
                            .call();

                        if (res.user().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/auth/access_token:
    get:
      summary: Get or refresh an access token for the current workspace.
      security: [{}]
      operationId: getAccessToken
      tags:
        - Auth
      parameters:
        - description: The workspace ID
          in: query
          name: workspace_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getAccessToken
          source: |-
            package main

            import(
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New()
                request := operations.GetAccessTokenRequest{
                    WorkspaceID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Auth.GetAccessToken(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.AccessToken != nil {
                    // handle response
                }
            }
        - lang: java
          label: getAccessToken
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .build();

                        GetAccessTokenRequest req = GetAccessTokenRequest.builder()
                            .workspaceId("<value>")
                            .build();

                        GetAccessTokenResponse res = sdk.auth().getAccessToken()
                            .request(req)
                            .call();

                        if (res.accessToken().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/eventlog/query:
    get:
      summary: Query the event log to retrieve a list of requests.
      description: |-
        Supports retrieving a list of request captured by the SDK for this workspace.
        Allows the filtering of requests on a number of criteria such as ApiID, VersionID, Path, Method, etc.
      operationId: queryEventLog
      parameters:
        - content:
            application/json:
              schema:
                $ref: "#/components/schemas/Filters"
          description: The filter to apply to the query.
          in: query
          name: filters
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                title: BoundedRequests
                items:
                  $ref: "#/components/schemas/BoundedRequest"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Requests
      x-codeSamples:
        - lang: go
          label: queryEventLog
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.QueryEventLogRequest{}
                ctx := context.Background()
                res, err := s.Requests.QueryEventLog(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.BoundedRequests != nil {
                    // handle response
                }
            }
        - lang: java
          label: queryEventLog
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        QueryEventLogRequest req = QueryEventLogRequest.builder()
                            .build();

                        QueryEventLogResponse res = sdk.requests().queryEventLog()
                            .request(req)
                            .call();

                        if (res.boundedRequests().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/eventlog/{requestID}:
    get:
      summary: Get information about a particular request.
      operationId: getRequestFromEventLog
      parameters:
        - description: The ID of the request to retrieve.
          in: path
          name: requestID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnboundedRequest"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Requests
      x-codeSamples:
        - lang: go
          label: getRequestFromEventLog
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetRequestFromEventLogRequest{
                    RequestID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Requests.GetRequestFromEventLog(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnboundedRequest != nil {
                    // handle response
                }
            }
        - lang: java
          label: getRequestFromEventLog
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetRequestFromEventLogRequest req = GetRequestFromEventLogRequest.builder()
                            .requestID("<value>")
                            .build();

                        GetRequestFromEventLogResponse res = sdk.requests().getRequestFromEventLog()
                            .request(req)
                            .call();

                        if (res.unboundedRequest().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/eventlog/{requestID}/generate/postman:
    get:
      summary: Generate a Postman collection for a particular request.
      description: "Generates a Postman collection for a particular request. \nAllowing it to be replayed with the same inputs that were captured by the SDK."
      operationId: generateRequestPostmanCollection
      parameters:
        - description: The ID of the request to retrieve.
          in: path
          name: requestID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                title: PostmanCollection
                type: string
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Requests
      x-codeSamples:
        - lang: go
          label: generateRequestPostmanCollection
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GenerateRequestPostmanCollectionRequest{
                    RequestID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Requests.GenerateRequestPostmanCollection(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PostmanCollection != nil {
                    // handle response
                }
            }
        - lang: java
          label: generateRequestPostmanCollection
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GenerateRequestPostmanCollectionRequest req = GenerateRequestPostmanCollectionRequest.builder()
                            .requestID("<value>")
                            .build();

                        GenerateRequestPostmanCollectionResponse res = sdk.requests().generateRequestPostmanCollection()
                            .request(req)
                            .call();

                        if (res.postmanCollection().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/check_access:
    get:
      operationId: checkAccess
      tags:
        - Github
      parameters:
        - in: query
          name: org
          required: true
          schema:
            type: string
        - in: query
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: checkAccess
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.CheckAccessRequest{
                    Org: "<value>",
                    Repo: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.CheckAccess(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: checkAccess
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        CheckAccessRequest req = CheckAccessRequest.builder()
                            .org("<value>")
                            .repo("<value>")
                            .build();

                        CheckAccessResponse res = sdk.github().checkAccess()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/publishing_prs:
    get:
      operationId: fetchPublishingPRs
      tags:
        - Github
      parameters:
        - in: query
          name: generate_gen_lock_id
          required: true
          schema:
            type: string
        - in: query
          name: org
          required: true
          schema:
            type: string
        - in: query
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubPublishingPRResponse"
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: fetchPublishingPRs
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.FetchPublishingPRsRequest{
                    GenerateGenLockID: "<value>",
                    Org: "<value>",
                    Repo: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.FetchPublishingPRs(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubPublishingPRResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: fetchPublishingPRs
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        FetchPublishingPRsRequest req = FetchPublishingPRsRequest.builder()
                            .generateGenLockId("<value>")
                            .org("<value>")
                            .repo("<value>")
                            .build();

                        FetchPublishingPRsResponse res = sdk.github().fetchPublishingPRs()
                            .request(req)
                            .call();

                        if (res.githubPublishingPRResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/publishing_secrets:
    get:
      operationId: githubCheckPublishingSecrets
      tags:
        - Github
      parameters:
        - in: query
          name: generate_gen_lock_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubMissingPublishingSecretsResponse"
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: githubCheckPublishingSecrets
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GithubCheckPublishingSecretsRequest{
                    GenerateGenLockID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.GithubCheckPublishingSecrets(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubMissingPublishingSecretsResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: githubCheckPublishingSecrets
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GithubCheckPublishingSecretsRequest req = GithubCheckPublishingSecretsRequest.builder()
                            .generateGenLockId("<value>")
                            .build();

                        GithubCheckPublishingSecretsResponse res = sdk.github().githubCheckPublishingSecrets()
                            .request(req)
                            .call();

                        if (res.githubMissingPublishingSecretsResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    post:
      operationId: githubStorePublishingSecrets
      tags:
        - Github
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GithubStorePublishingSecretsRequest"
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: githubStorePublishingSecrets
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubStorePublishingSecretsRequest{
                    GenerateGenLockID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.GithubStorePublishingSecrets(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: githubStorePublishingSecrets
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GithubStorePublishingSecretsRequest req = GithubStorePublishingSecretsRequest.builder()
                            .generateGenLockId("<value>")
                            .build();

                        GithubStorePublishingSecretsResponse res = sdk.github().githubStorePublishingSecrets()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/configure_code_samples:
    post:
      operationId: configureCodeSamples
      tags:
        - Github
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GithubConfigureCodeSamplesRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubConfigureCodeSamplesResponse"
                required: true
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: configureCodeSamples
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubConfigureCodeSamplesRequest{
                    Org: "<value>",
                    Repo: "<value>",
                    TargetName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.ConfigureCodeSamples(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubConfigureCodeSamplesResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: configureCodeSamples
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GithubConfigureCodeSamplesRequest req = GithubConfigureCodeSamplesRequest.builder()
                            .org("<value>")
                            .repo("<value>")
                            .targetName("<value>")
                            .build();

                        ConfigureCodeSamplesResponse res = sdk.github().configureCodeSamples()
                            .request(req)
                            .call();

                        if (res.githubConfigureCodeSamplesResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/configure_mintlify_repo:
    post:
      operationId: configureMintlifyRepo
      tags:
        - Github
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GithubConfigureMintlifyRepoRequest"
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: configureMintlifyRepo
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubConfigureMintlifyRepoRequest{
                    Org: "<value>",
                    Repo: "<value>",
                    Input: "<value>",
                    Overlays: []string{
                        "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Github.ConfigureMintlifyRepo(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: configureMintlifyRepo
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GithubConfigureMintlifyRepoRequest req = GithubConfigureMintlifyRepoRequest.builder()
                            .org("<value>")
                            .repo("<value>")
                            .input("<value>")
                            .overlays(java.util.List.of(
                                    "<value>"))
                            .build();

                        ConfigureMintlifyRepoResponse res = sdk.github().configureMintlifyRepo()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/configure_target:
    post:
      operationId: configureTarget
      tags:
        - Github
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GithubConfigureTargetRequest"
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: configureTarget
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubConfigureTargetRequest{
                    Org: "<value>",
                    RepoName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.ConfigureTarget(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: configureTarget
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GithubConfigureTargetRequest req = GithubConfigureTargetRequest.builder()
                            .org("<value>")
                            .repoName("<value>")
                            .build();

                        ConfigureTargetResponse res = sdk.github().configureTarget()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/trigger_action:
    post:
      operationId: triggerAction
      tags:
        - Github
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GithubTriggerActionRequest"
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: triggerAction
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := shared.GithubTriggerActionRequest{
                    Org: "<value>",
                    RepoName: "<value>",
                    GenLockID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.TriggerAction(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: triggerAction
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GithubTriggerActionRequest req = GithubTriggerActionRequest.builder()
                            .org("<value>")
                            .repoName("<value>")
                            .genLockId("<value>")
                            .build();

                        TriggerActionResponse res = sdk.github().triggerAction()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/github/action:
    get:
      operationId: getAction
      tags:
        - Github
      parameters:
        - description: The targetName of the workflow target.
          in: query
          name: targetName
          schema:
            type: string
        - in: query
          name: org
          required: true
          schema:
            type: string
        - in: query
          name: repo
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubGetActionResponse"
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getAction
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetActionRequest{
                    Org: "<value>",
                    Repo: "<value>",
                }
                ctx := context.Background()
                res, err := s.Github.GetAction(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GithubGetActionResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: getAction
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetActionRequest req = GetActionRequest.builder()
                            .org("<value>")
                            .repo("<value>")
                            .build();

                        GetActionResponse res = sdk.github().getAction()
                            .request(req)
                            .call();

                        if (res.githubGetActionResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/organization:
    get:
      summary: Get organizations for a user
      description: |-
        Returns a list of organizations a user has access too
      operationId: getOrganizations
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Organizations
                items:
                  $ref: "#/components/schemas/Organization"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Organizations
      x-codeSamples:
        - lang: go
          label: getOrganizations
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Organizations.GetOrganizations(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Organizations != nil {
                    // handle response
                }
            }
        - lang: java
          label: getOrganizations
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetOrganizationsResponse res = sdk.organizations().getOrganizations()
                            .call();

                        if (res.organizations().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/organization/free_trial:
    post:
      summary: Create a free trial for an organization
      description: |-
        Creates a free trial for an organization
      operationId: createFreeTrial
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Organizations
      x-codeSamples:
        - lang: go
          label: createFreeTrial
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Organizations.CreateFreeTrial(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: createFreeTrial
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        CreateFreeTrialResponse res = sdk.organizations().createFreeTrial()
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/organization/usage:
    get:
      summary: Get billing usage summary for a particular organization
      description: |-
        Returns a billing usage summary by target languages for a particular organization
      operationId: getOrganizationUsage
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUsageResponse"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Organizations
      x-codeSamples:
        - lang: go
          label: getOrganizationUsage
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Organizations.GetOrganizationUsage(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.OrganizationUsageResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: getOrganizationUsage
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetOrganizationUsageResponse res = sdk.organizations().getOrganizationUsage()
                            .call();

                        if (res.organizationUsageResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/workspace/embed-access-token:
    get:
      summary: Get an embed access token for the current workspace.
      description: |-
        Returns an embed access token for the current workspace. This can be used to authenticate access to externally embedded content.
        Filters can be applied allowing views to be filtered to things like particular customerIds.
      operationId: getEmbedAccessToken
      parameters:
        - description: The description of the embed access token.
          in: query
          name: description
          required: false
          schema:
            type: string
        - description: The duration (in minutes) of the embed access token.
          in: query
          name: duration
          required: false
          schema:
            type: integer
        - content:
            application/json:
              schema:
                $ref: "#/components/schemas/Filters"
          description: The filter to apply to the query.
          in: query
          name: filters
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbedAccessTokenResponse"
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Embeds
      x-codeSamples:
        - lang: go
          label: getEmbedAccessToken
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetEmbedAccessTokenRequest{}
                ctx := context.Background()
                res, err := s.Embeds.GetEmbedAccessToken(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EmbedAccessTokenResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: getEmbedAccessToken
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetEmbedAccessTokenRequest req = GetEmbedAccessTokenRequest.builder()
                            .build();

                        GetEmbedAccessTokenResponse res = sdk.embeds().getEmbedAccessToken()
                            .request(req)
                            .call();

                        if (res.embedAccessTokenResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/workspace/embed-access-tokens/valid:
    get:
      summary: Get all valid embed access tokens for the current workspace.
      operationId: getValidEmbedAccessTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                title: EmbedTokens
                items:
                  $ref: "#/components/schemas/EmbedToken"
                type: array
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Embeds
      x-codeSamples:
        - lang: go
          label: getValidEmbedAccessTokens
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Embeds.GetValidEmbedAccessTokens(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EmbedTokens != nil {
                    // handle response
                }
            }
        - lang: java
          label: getValidEmbedAccessTokens
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetValidEmbedAccessTokensResponse res = sdk.embeds().getValidEmbedAccessTokens()
                            .call();

                        if (res.embedTokens().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/workspace/embed-access-tokens/{tokenID}:
    delete:
      summary: Revoke an embed access EmbedToken.
      operationId: revokeEmbedAccessToken
      parameters:
        - description: The ID of the EmbedToken to revoke.
          in: path
          name: tokenID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Embeds
      x-codeSamples:
        - lang: go
          label: revokeEmbedAccessToken
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.RevokeEmbedAccessTokenRequest{
                    TokenID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Embeds.RevokeEmbedAccessToken(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: revokeEmbedAccessToken
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        RevokeEmbedAccessTokenRequest req = RevokeEmbedAccessTokenRequest.builder()
                            .tokenID("<value>")
                            .build();

                        RevokeEmbedAccessTokenResponse res = sdk.embeds().revokeEmbedAccessToken()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/workspace/{workspaceID}/events:
    parameters:
      - name: workspaceID
        in: path
        required: true
        description: Unique identifier of the workspace.
        schema:
          type: string
    get:
      description: Search events for a particular workspace by any field
      operationId: searchWorkspaceEvents
      parameters:
        - name: source_revision_digest
          in: query
          required: false
          description: Unique identifier of the source revision digest.
          schema:
            type: string
        - name: lint_report_digest
          in: query
          required: false
          description: Unique identifier of the lint report digest.
          schema:
            type: string
        - name: openapi_diff_report_digest
          in: query
          required: false
          description: Unique identifier of the openapi diff report digest.
          schema:
            type: string
        - name: interaction_type
          in: query
          required: false
          description: Specified interaction type for events.
          schema:
            $ref: "#/components/schemas/InteractionType"
        - name: generate_gen_lock_id
          in: query
          required: false
          description: A specific gen lock ID for the events.
          schema:
            type: string
      tags:
        - Events
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CliEventBatch"
        5XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-codeSamples:
        - lang: go
          label: searchWorkspaceEvents
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.SearchWorkspaceEventsRequest{}
                ctx := context.Background()
                res, err := s.Events.SearchWorkspaceEvents(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CliEventBatch != nil {
                    // handle response
                }
            }
        - lang: java
          label: searchWorkspaceEvents
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        SearchWorkspaceEventsRequest req = SearchWorkspaceEventsRequest.builder()
                            .build();

                        SearchWorkspaceEventsResponse res = sdk.events().searchWorkspaceEvents()
                            .request(req)
                            .call();

                        if (res.cliEventBatch().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.Error e) {
                        // handle exception
                        throw e;
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    post:
      summary: Post events for a specific workspace
      description: Sends an array of events to be stored for a particular workspace.
      operationId: postWorkspaceEvents
      # Idempotent, so allow retries
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 100 # 100 milliseconds
          maxInterval: 2000 # 2 seconds
          maxElapsedTime: 60000 # 60 seconds
          exponent: 1.5
        statusCodes:
          - 408
          - 500
          - 502
          - 503
        retryConnectionErrors: true
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CliEventBatch"
      responses:
        2XX:
          description: Success
        5XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-codeSamples:
        - lang: go
          label: postWorkspaceEvents
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/types"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.PostWorkspaceEventsRequest{
                    RequestBody: []shared.CliEvent{
                        shared.CliEvent{
                            ID: "<id>",
                            ExecutionID: "<value>",
                            WorkspaceID: "<value>",
                            SpeakeasyAPIKeyName: "<value>",
                            InteractionType: shared.InteractionTypePublish,
                            LocalStartedAt: types.MustTimeFromString("2022-05-18T11:28:11.328Z"),
                            CreatedAt: types.MustTimeFromString("2024-05-07T12:35:47.182Z"),
                            SpeakeasyVersion: "<value>",
                            Success: false,
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Events.PostWorkspaceEvents(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: postWorkspaceEvents
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        PostWorkspaceEventsRequest req = PostWorkspaceEventsRequest.builder()
                            .requestBody(java.util.List.of(
                                    CliEvent.builder()
                                        .id("<value>")
                                        .executionId("<value>")
                                        .workspaceId("<value>")
                                        .speakeasyApiKeyName("<value>")
                                        .interactionType(InteractionType.PUBLISH)
                                        .localStartedAt(OffsetDateTime.parse("2022-05-18T11:28:11.328Z"))
                                        .createdAt(OffsetDateTime.parse("2024-05-07T12:35:47.182Z"))
                                        .speakeasyVersion("<value>")
                                        .success(false)
                                        .build()))
                            .build();

                        PostWorkspaceEventsResponse res = sdk.events().postWorkspaceEvents()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.Error e) {
                        // handle exception
                        throw e;
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/workspace/{workspaceID}/events/targets/{targetID}/events:
    get:
      description: Load recent events for a particular workspace
      operationId: getWorkspaceEventsByTarget
      tags:
        - Events
      parameters:
        - name: workspaceID
          in: path
          required: true
          description: Unique identifier of the workspace.
          schema:
            type: string
        - name: targetID
          in: path
          description: Filter to only return events corresponding to a particular gen_lock_id (gen_lock_id uniquely identifies a target)
          required: true
          schema:
            type: string
        - name: after_created_at
          in: query
          description: Filter to only return events created after this timestamp
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CliEventBatch"
        5XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-codeSamples:
        - lang: go
          label: getWorkspaceEventsByTarget
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetWorkspaceEventsByTargetRequest{
                    TargetID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Events.GetWorkspaceEventsByTarget(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CliEventBatch != nil {
                    // handle response
                }
            }
        - lang: java
          label: getWorkspaceEventsByTarget
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetWorkspaceEventsByTargetRequest req = GetWorkspaceEventsByTargetRequest.builder()
                            .targetID("<value>")
                            .build();

                        GetWorkspaceEventsByTargetResponse res = sdk.events().getWorkspaceEventsByTarget()
                            .request(req)
                            .call();

                        if (res.cliEventBatch().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.Error e) {
                        // handle exception
                        throw e;
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/workspace/access:
    get:
      summary: Get access allowances for a particular workspace
      description: Checks if generation is permitted for a particular run of the CLI
      operationId: getWorkspaceAccess
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 100 # 100 milliseconds
          maxInterval: 2000 # 2 seconds
          maxElapsedTime: 60000 # 60 seconds
          exponent: 1.5
        statusCodes:
          - 408
          - 500
          - 502
          - 503
        retryConnectionErrors: true
      tags:
        - Auth
      parameters:
        - name: genLockId
          in: query
          description: Unique identifier of the generation target.
          schema:
            type: string
        - name: targetType
          in: query
          description: The type of the generated target.
          schema:
            type: string
        - name: passive
          in: query
          description: Skip side-effects like incrementing metrics.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDetails"
      x-codeSamples:
        - lang: go
          label: getWorkspaceAccess
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetWorkspaceAccessRequest{}
                ctx := context.Background()
                res, err := s.Auth.GetWorkspaceAccess(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.AccessDetails != nil {
                    // handle response
                }
            }
        - lang: java
          label: getWorkspaceAccess
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetWorkspaceAccessRequest req = GetWorkspaceAccessRequest.builder()
                            .build();

                        GetWorkspaceAccessResponse res = sdk.auth().getWorkspaceAccess()
                            .request(req)
                            .call();

                        if (res.accessDetails().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/workspace/{workspaceID}/events/targets:
    parameters:
      - name: workspaceID
        in: path
        required: true
        description: Unique identifier of the workspace.
        schema:
          type: string
      - name: after_last_event_created_at
        in: query
        description: Filter to only return targets with events created after this timestamp
        required: false
        schema:
          type: string
          format: date-time
    get:
      description: Load targets for a particular workspace
      operationId: getWorkspaceTargets
      tags:
        - Events
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetSDKList"
        5XX:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-codeSamples:
        - lang: go
          label: getWorkspaceTargets
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetWorkspaceTargetsRequest{}
                ctx := context.Background()
                res, err := s.Events.GetWorkspaceTargets(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TargetSDKList != nil {
                    // handle response
                }
            }
        - lang: java
          label: getWorkspaceTargets
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetWorkspaceTargetsRequest req = GetWorkspaceTargetsRequest.builder()
                            .build();

                        GetWorkspaceTargetsResponse res = sdk.events().getWorkspaceTargets()
                            .request(req)
                            .call();

                        if (res.targetSDKList().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.Error e) {
                        // handle exception
                        throw e;
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/artifacts/preflight:
    post:
      summary: Get access token for communicating with OCI distribution endpoints
      operationId: preflight
      tags:
        - Artifacts
      requestBody:
        $ref: "#/components/requestBodies/PreflightRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreflightToken"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: preflight
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                var request *shared.PreflightRequest = &shared.PreflightRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.Preflight(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PreflightToken != nil {
                    // handle response
                }
            }
        - lang: java
          label: preflight
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        PreflightRequest req = PreflightRequest.builder()
                            .namespaceName("<value>")
                            .build();

                        PreflightResponse res = sdk.artifacts().preflight()
                            .request(req)
                            .call();

                        if (res.preflightToken().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/artifacts/namespaces:
    get:
      summary: Each namespace contains many revisions.
      operationId: getNamespaces
      tags:
        - Artifacts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNamespacesResponse"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getNamespaces
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )

                ctx := context.Background()
                res, err := s.Artifacts.GetNamespaces(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GetNamespacesResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: getNamespaces
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetNamespacesResponse res = sdk.artifacts().getNamespaces()
                            .call();

                        if (res.getNamespacesResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/artifacts/namespaces/{namespace_name}/revisions:
    get:
      operationId: getRevisions
      tags:
        - Artifacts
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - in: query
          name: next_page_token
          schema:
            type: string
          description: Token to retrieve the next page of results
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRevisionsResponse"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getRevisions
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetRevisionsRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetRevisions(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GetRevisionsResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: getRevisions
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetRevisionsRequest req = GetRevisionsRequest.builder()
                            .namespaceName("<value>")
                            .build();

                        GetRevisionsResponse res = sdk.artifacts().getRevisions()
                            .request(req)
                            .call();

                        if (res.getRevisionsResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/artifacts/namespaces/{namespace_name}/revisions/{revision_reference}/summary:
    get:
      operationId: getOASSummary
      tags:
        - Artifacts
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - in: path
          name: revision_reference
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OASSummary"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getOASSummary
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetOASSummaryRequest{
                    NamespaceName: "<value>",
                    RevisionReference: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetOASSummary(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.OASSummary != nil {
                    // handle response
                }
            }
        - lang: java
          label: getOASSummary
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetOASSummaryRequest req = GetOASSummaryRequest.builder()
                            .namespaceName("<value>")
                            .revisionReference("<value>")
                            .build();

                        GetOASSummaryResponse res = sdk.artifacts().getOASSummary()
                            .request(req)
                            .call();

                        if (res.oasSummary().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/artifacts/namespaces/{namespace_name}/tags:
    get:
      operationId: getTags
      tags:
        - Artifacts
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagsResponse"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getTags
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetTagsRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetTags(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GetTagsResponse != nil {
                    // handle response
                }
            }
        - lang: java
          label: getTags
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetTagsRequest req = GetTagsRequest.builder()
                            .namespaceName("<value>")
                            .build();

                        GetTagsResponse res = sdk.artifacts().getTags()
                            .request(req)
                            .call();

                        if (res.getTagsResponse().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
    post:
      summary: Add tags to an existing revision
      operationId: postTags
      tags:
        - Artifacts
      parameters:
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON representation of the tags to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTags"
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: postTags
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.PostTagsRequest{
                    NamespaceName: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.PostTags(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: java
          label: postTags
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        PostTagsRequest req = PostTagsRequest.builder()
                            .namespaceName("<value>")
                            .build();

                        PostTagsResponse res = sdk.artifacts().postTags()
                            .request(req)
                            .call();

                        // handle response
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/oci/v2/{organization_slug}/{workspace_slug}/{namespace_name}/manifests/{revision_reference}:
    get:
      summary: Get manifest for a particular reference
      operationId: getManifest
      tags:
        - Artifacts
      parameters:
        - in: header
          name: Accept
          required: true
          schema:
            type: string
        - in: path
          name: organization_slug
          required: true
          schema:
            type: string
        - in: path
          name: workspace_slug
          required: true
          schema:
            type: string
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - in: path
          name: revision_reference
          required: true
          schema:
            type: string
          description: Tag or digest
      responses:
        "200":
          description: OK
          content:
            application/vnd.oci.image.manifest.v1+json:
              schema:
                $ref: "#/components/schemas/Manifest"
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getManifest
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetManifestRequest{
                    OrganizationSlug: "<value>",
                    WorkspaceSlug: "<value>",
                    NamespaceName: "<value>",
                    RevisionReference: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetManifest(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Manifest != nil {
                    // handle response
                }
            }
        - lang: java
          label: getManifest
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetManifestRequest req = GetManifestRequest.builder()
                            .organizationSlug("<value>")
                            .workspaceSlug("<value>")
                            .namespaceName("<value>")
                            .revisionReference("<value>")
                            .build();

                        GetManifestResponse res = sdk.artifacts().getManifest()
                            .request(req)
                            .call();

                        if (res.manifest().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/oci/v2/{organization_slug}/{workspace_slug}/{namespace_name}/blobs/{digest}:
    get:
      summary: Get blob for a particular digest
      operationId: getBlob
      tags:
        - Artifacts
      parameters:
        - in: path
          name: organization_slug
          required: true
          schema:
            type: string
        - in: path
          name: workspace_slug
          required: true
          schema:
            type: string
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - in: path
          name: digest
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                format: binary
                title: Blob
                type: string
        default:
          $ref: "#/components/responses/default"
      x-codeSamples:
        - lang: go
          label: getBlob
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetBlobRequest{
                    OrganizationSlug: "<value>",
                    WorkspaceSlug: "<value>",
                    NamespaceName: "<value>",
                    Digest: "<value>",
                }
                ctx := context.Background()
                res, err := s.Artifacts.GetBlob(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Blob != nil {
                    // handle response
                }
            }
        - lang: java
          label: getBlob
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetBlobRequest req = GetBlobRequest.builder()
                            .organizationSlug("<value>")
                            .workspaceSlug("<value>")
                            .namespaceName("<value>")
                            .digest("<value>")
                            .build();

                        GetBlobResponse res = sdk.artifacts().getBlob()
                            .request(req)
                            .call();

                        if (res.blob().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/reports:
    post:
      summary: Upload a report.
      operationId: uploadReport
      requestBody:
        description: The report file to upload provided as a multipart/form-data file segment.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/Report"
                file:
                  format: binary
                  type: string
              required:
                - data
                - file
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: uploadedReport
                properties:
                  url:
                    type: string
                required:
                  - url
      tags:
        - Reports
      x-codeSamples:
        - lang: go
          label: uploadReport
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.UploadReportRequestBody{
                    Data: shared.Report{},
                    File: operations.UploadReportFile{
                        FileName: "your_file_here",
                        Content: []byte("0xA329C0ad85"),
                    },
                }
                ctx := context.Background()
                res, err := s.Reports.UploadReport(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UploadedReport != nil {
                    // handle response
                }
            }
        - lang: java
          label: uploadReport
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        UploadReportRequestBody req = UploadReportRequestBody.builder()
                            .data(Report.builder()
                                    .build())
                            .file(UploadReportFile.builder()
                                    .fileName("<value>")
                                    .content("0xA329C0ad85".getBytes())
                                    .build())
                            .build();

                        UploadReportResponse res = sdk.reports().uploadReport()
                            .request(req)
                            .call();

                        if (res.uploadedReport().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/reports/linting/{documentChecksum}:
    get:
      summary: Get the signed access url for the linting reports for a particular document.
      operationId: getLintingReportSignedUrl
      parameters:
        - description: The checksum of the document to retrieve the signed access url for.
          in: path
          name: documentChecksum
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: signedAccess
                properties:
                  url:
                    type: string
                required:
                  - url
      tags:
        - Reports
      x-codeSamples:
        - lang: go
          label: getLintingReportSignedUrl
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetLintingReportSignedURLRequest{
                    DocumentChecksum: "<value>",
                }
                ctx := context.Background()
                res, err := s.Reports.GetLintingReportSignedURL(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SignedAccess != nil {
                    // handle response
                }
            }
        - lang: java
          label: getLintingReportSignedUrl
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetLintingReportSignedUrlRequest req = GetLintingReportSignedUrlRequest.builder()
                            .documentChecksum("<value>")
                            .build();

                        GetLintingReportSignedUrlResponse res = sdk.reports().getLintingReportSignedUrl()
                            .request(req)
                            .call();

                        if (res.signedAccess().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/reports/changes/{documentChecksum}:
    get:
      summary: Get the signed access url for the change reports for a particular document.
      operationId: getChangesReportSignedUrl
      parameters:
        - description: The checksum of the document to retrieve the signed access url for.
          in: path
          name: documentChecksum
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: signedAccess
                properties:
                  url:
                    type: string
                required:
                  - url
      tags:
        - Reports
      x-codeSamples:
        - lang: go
          label: getChangesReportSignedUrl
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.GetChangesReportSignedURLRequest{
                    DocumentChecksum: "<value>",
                }
                ctx := context.Background()
                res, err := s.Reports.GetChangesReportSignedURL(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SignedAccess != nil {
                    // handle response
                }
            }
        - lang: java
          label: getChangesReportSignedUrl
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        GetChangesReportSignedUrlRequest req = GetChangesReportSignedUrlRequest.builder()
                            .documentChecksum("<value>")
                            .build();

                        GetChangesReportSignedUrlResponse res = sdk.reports().getChangesReportSignedUrl()
                            .request(req)
                            .call();

                        if (res.signedAccess().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/suggest/operation_ids:
    post:
      summary: Generate operation ID suggestions.
      description: |-
        Get suggestions from an LLM model for improving the operationIDs in the provided schema.
      operationId: suggestOperationIDs
      parameters:
        - in: header
          name: x-session-id
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
          description: Max number of suggestions to request
      requestBody:
        description: The schema file to upload provided as a multipart/form-data file segment.
        content:
          multipart/form-data:
            schema:
              properties:
                opts:
                  $ref: "#/components/schemas/SuggestOperationIDsOpts"
                schema:
                  format: binary
                  type: string
              required:
                - schema
              type: object
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestedOperationIDs"
      tags:
        - Suggest
      x-codeSamples:
        - lang: go
          label: suggestOperationIDs
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.SuggestOperationIDsRequest{
                    XSessionID: "<value>",
                    RequestBody: operations.SuggestOperationIDsRequestBody{
                        Schema: operations.Schema{
                            FileName: "your_file_here",
                            Content: []byte("0xb2de88c98a"),
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Suggest.SuggestOperationIDs(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SuggestedOperationIDs != nil {
                    // handle response
                }
            }
        - lang: java
          label: suggestOperationIDs
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        SuggestOperationIDsRequest req = SuggestOperationIDsRequest.builder()
                            .xSessionId("<value>")
                            .requestBody(SuggestOperationIDsRequestBody.builder()
                                    .schema(Schema.builder()
                                            .fileName("<value>")
                                            .content("0xb2de88c98a".getBytes())
                                            .build())
                                    .build())
                            .build();

                        SuggestOperationIDsResponse res = sdk.suggest().suggestOperationIDs()
                            .request(req)
                            .call();

                        if (res.suggestedOperationIDs().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/suggest/operation_ids/{namespace_name}/{revision_reference}:
    post:
      summary: Generate operation ID suggestions.
      description: |-
        Get suggestions from an LLM model for improving the operationIDs in the provided schema.
      operationId: suggestOperationIDsRegistry
      parameters:
        - in: header
          name: x-session-id
          required: true
          schema:
            type: string
        - in: path
          name: namespace_name
          required: true
          schema:
            type: string
        - in: path
          name: revision_reference
          required: true
          schema:
            type: string
          description: Tag or digest
        - in: query
          name: limit
          schema:
            type: number
          description: Max number of suggestions to request
      requestBody:
        description: The schema file to upload provided as a multipart/form-data file segment.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuggestOperationIDsOpts"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestedOperationIDs"
      tags:
        - Suggest
      x-codeSamples:
        - lang: go
          label: suggestOperationIDsRegistry
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.SuggestOperationIDsRegistryRequest{
                    NamespaceName: "<value>",
                    RevisionReference: "<value>",
                    XSessionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Suggest.SuggestOperationIDsRegistry(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SuggestedOperationIDs != nil {
                    // handle response
                }
            }
        - lang: java
          label: suggestOperationIDsRegistry
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        SuggestOperationIDsRegistryRequest req = SuggestOperationIDsRegistryRequest.builder()
                            .namespaceName("<value>")
                            .revisionReference("<value>")
                            .xSessionId("<value>")
                            .build();

                        SuggestOperationIDsRegistryResponse res = sdk.suggest().suggestOperationIDsRegistry()
                            .request(req)
                            .call();

                        if (res.suggestedOperationIDs().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/suggest/operation_ids/apply:
    post:
      summary: Apply operation ID suggestions and download result.
      operationId: applyOperationIDs
      parameters:
        - in: header
          name: x-session-id
          required: true
          schema:
            type: string
      requestBody:
        description: Apply options
        content:
          application/json:
            schema:
              type: object
              properties:
                as_overlay:
                  type: boolean
                  description: "Whether to apply the suggestions as an overlay or replace the existing operationIDs. Default: false"
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                title: Schema
                type: string
            application/x-yaml:
              schema:
                format: binary
                title: Schema
                type: string
          description: OK
        default:
          $ref: "#/components/responses/default"
      tags:
        - Suggest
      x-codeSamples:
        - lang: go
          label: applyOperationIDs
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.ApplyOperationIDsRequest{
                    XSessionID: "<value>",
                }
                ctx := context.Background()
                res, err := s.Suggest.ApplyOperationIDs(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONSchema != nil {
                    // handle response
                }
            }
        - lang: java
          label: applyOperationIDs
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        ApplyOperationIDsRequest req = ApplyOperationIDsRequest.builder()
                            .xSessionId("<value>")
                            .build();

                        ApplyOperationIDsResponse res = sdk.suggest().applyOperationIDs()
                            .request(req)
                            .call();

                        if (res.twoHundredApplicationJsonSchema().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
  /v1/short_urls:
    post:
      summary: Shorten a URL.
      operationId: create
      tags:
        - ShortURLs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: "URL to shorten"
              required:
                - url
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShortURL"
      x-codeSamples:
        - lang: go
          label: create
          source: |-
            package main

            import(
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
            	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
            	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := speakeasyclientsdkgo.New(
                    speakeasyclientsdkgo.WithSecurity(shared.Security{
                        APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
                    }),
                )
                request := operations.CreateRequestBody{
                    URL: "http://limp-pastry.org",
                }
                ctx := context.Background()
                res, err := s.ShortURLs.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ShortURL != nil {
                    // handle response
                }
            }
        - lang: java
          label: create
          source: |-
            package hello.world;

            import io.github.speakeasy_sdks_staging.javaclientsdk.SDK;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.operations.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.*;
            import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.Security;
            import io.github.speakeasy_sdks_staging.javaclientsdk.utils.EventStream;
            import java.math.BigDecimal;
            import java.math.BigDecimal;
            import java.math.BigInteger;
            import java.time.LocalDate;
            import java.time.OffsetDateTime;
            import java.util.Optional;
            import org.openapitools.jackson.nullable.JsonNullable;
            import static java.util.Map.entry;

            public class Application {

                public static void main(String[] args) throws Exception {
                    try {
                        SDK sdk = SDK.builder()
                            .security(Security.builder()
                                .apiKey("<YOUR_API_KEY_HERE>")
                                .build())
                            .build();

                        CreateRequestBody req = CreateRequestBody.builder()
                            .url("<value>")
                            .build();

                        CreateResponse res = sdk.shortURLs().create()
                            .request(req)
                            .call();

                        if (res.shortURL().isPresent()) {
                            // handle response
                        }
                    } catch (io.github.speakeasy_sdks_staging.javaclientsdk.models.errors.SDKError e) {
                        // handle exception
                        throw e;
                    } catch (Exception e) {
                        // handle exception
                        throw e;
                    }

                }
            }
components:
  requestBodies:
    PreflightRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              namespace_name:
                type: string
            required:
              - namespace_name
  responses:
    default:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      description: Default error response
  schemas:
    Annotations:
      description: Annotations
      properties:
        org.opencontainers.image.created:
          type: string
          description: The time the image was created
        org.opencontainers.image.authors:
          type: string
          description: The authors of the image
        org.opencontainers.image.url:
          type: string
          description: The URL of the image
        org.opencontainers.image.documentation:
          type: string
          description: The documentation URL of the image
        org.opencontainers.image.source:
          type: string
          description: The URL to get source code for building the image
        org.opencontainers.image.version:
          type: string
          description: The version of the packaged software
        org.opencontainers.image.revision:
          type: string
          description: Source control revision identifier
        org.opencontainers.image.vendor:
          type: string
          description: Name of the distributing entity, organization or individual.
        org.opencontainers.image.licenses:
          type: string
        org.opencontainers.image.ref.name:
          type: string
          description: Name of the reference for a target
        org.opencontainers.image.title:
          type: string
          description: Human-readable title of the image
        org.opencontainers.image.description:
          type: string
          description: Human-readable description of the software packaged in the image
    Manifest:
      description: Returns the requested manifest file
      example:
        config:
          digest: sha256:6d1ef012b5674ad8a127ecfa9b5e6f5178d171b90ee462846974177fd9bdd39f
          mediaType: application/vnd.docker.container.image.v1+json
          size: 1512
        layers:
          - digest: sha256:5d20c808ce198565ff70b3ed23a991dd49afac45dece63474b27ce6ed036adc6
            mediaType: application/vnd.docker.image.rootfs.diff.tar.gzip
            size: 2107098
        mediaType: application/vnd.docker.distribution.manifest.v2+json
        schemaVersion: 2
      properties:
        schemaVersion:
          description: Schema version
          type: integer
        mediaType:
          description: Media type usually application/vnd.docker.distribution.manifest.v2+json if this is in the accept header
          type: string
        artifactType:
          description: Type of artifact
          type: string
        annotations:
          $ref: "#/components/schemas/Annotations"
        layers:
          description: List of V2 image layer information
          items:
            $ref: "#/components/schemas/V2Descriptor"
          type: array
    V2Descriptor:
      description: V2 descriptor
      properties:
        digest:
          description: Digest
          type: string
        mediaType:
          description: Media type
          type: string
        size:
          description: Size
          type: integer
        annotations:
          $ref: "#/components/schemas/Annotations"
    PreflightToken:
      description: A PreflightToken is a token that allows access to the OCI distribution endpoints.
      properties:
        auth_token:
          type: string
      required:
        - access_token
    GetNamespacesResponse:
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Namespace"
      required:
        - items
    GetRevisionsResponse:
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Revision"
        next_page_token:
          type: string
      required:
        - items
        - next_page_token
    GetTagsResponse:
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
      required:
        - items
    GithubConfigureCodeSamplesRequest:
      description: A request to configure GitHub code samples
      type: object
      properties:
        org:
          type: string
          description: The GitHub organization name
        repo:
          type: string
          description: The GitHub repository name
        targetName:
          type: string
          description: The target name for the code samples
      required:
        - org
        - repo
        - targetName
    GithubConfigureCodeSamplesResponse:
      description: A response to configure GitHub code samples
      type: object
      properties:
        source:
          $ref: "#/components/schemas/WorkflowDocument"
        codeSampleOverlayRegistryURL:
          type: string
          description: The URL of the code sample overlay registry
        ghActionID:
          type: string
          description: The ID of the GitHub action that was dispatched
      required:
        - source
        - codeSampleOverlayRegistryURL
    WorkflowDocument:
      description: A document referenced by a workflow
      properties:
        location:
          type: string
        auth:
          type: object
          properties:
            header:
              type: string
            secret:
              type: string
          required:
            - header
            - secret
      required:
        - location
    GithubConfigureMintlifyRepoRequest:
      description: A request to configure a GitHub repository for mintlify
      type: object
      properties:
        org:
          type: string
          description: The GitHub organization name
        repo:
          type: string
          description: The GitHub repository name
        subdirectory:
          type: string
          description: The subdirectory (location of mint.json)
        input:
          type: string
          description: The input OpenAPI document
        overlays:
          type: array
          description: The overlays to apply
          items:
            type: string
      required:
        - org
        - repo
        - input
        - overlays
    GithubConfigureTargetRequest:
      description: A request to configure a GitHub target
      type: object
      properties:
        org:
          type: string
          description: The GitHub organization name
        repo_name:
          type: string
          description: The GitHub repository name
      required:
        - org
        - repo_name
    GithubMissingPublishingSecretsResponse:
      description: A valid response containing MISSING publishing secret keys for a github target
      type: object
      properties:
        missing_secrets:
          type: array
          items:
            type: string
    GithubPublishingPRResponse:
      description: Open generation PRs pending publishing
      type: object
      properties:
        generation_pull_request:
          type: string
        pending_version:
          type: string
    GithubStorePublishingSecretsRequest:
      description: A request to store publishing secrets for a github target
      type: object
      properties:
        generate_gen_lock_id:
          type: string
          description: The generation lock ID
        secrets:
          type: object
          description: A map of secrets to store in the GitHub target
          additionalProperties:
            type: string
      required:
        - generate_gen_lock_id
    GithubTriggerActionRequest:
      description: A request to trigger an action on a GitHub target
      type: object
      properties:
        org:
          type: string
          description: The GitHub organization name
        repo_name:
          type: string
          description: The GitHub repository name
        target_name:
          type: string
          description: The target name for the action
        gen_lock_id:
          type: string
          description: The generation lock ID
        set_version:
          type: string
          description: A version to override the SDK too in workflow dispatch
      required:
        - org
        - repo_name
        - gen_lock_id
    GithubGetActionResponse:
      description: response to a getting the latest action run on a GitHub request
      type: object
      properties:
        run_url:
          type: string
          description: The URL for latest action run if available
        run_status:
          type: string
          description: The status of the latest action run if available
    Tag:
      properties:
        id:
          type: string
          description: Format {namespace_id}/{tag}
        name:
          type: string
          description: Human readable tag name
        namespace_name:
          type: string
        revision_digest:
          type: string
      required:
        - id
        - name
        - namespace_name
        - revision_digest
    Namespace:
      description: A namespace contains many revisions.
      properties:
        id:
          type: string
          description: "{organization_slug}/{workspace_slug}/{namespace_name}"
        name:
          type: string
          description: A human-readable name for the namespace.
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
      required:
        - id
        - name
        - created_at
        - updated_at
    Revision:
      properties:
        id:
          type: string
          description: Format {namespace_id}/{revision_digest}
        digest:
          type: string
          example: sha256:6d1ef012b5674ad8a127ecfa9b5e6f5178d171b90ee462846974177fd9bdd39f
        namespace_name:
          type: string
        tags:
          type: array
          items:
            type: string
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
      required:
        - id
        - namespace_name
        - digest
        - tags
        - created_at
        - updated_at
    ApiKeyDetails:
      type: object
      properties:
        workspace_id:
          type: string
        workspace_slug:
          type: string
        org_slug:
          type: string
        generation_access_unlimited:
          type: boolean
        account_type:
          type: string
          enum:
            - free
            - scale-up
            - enterprise
        enabled_features:
          type: array
          items:
            type: string
        feature_flags:
          deprecated: true
          type: array
          items:
            type: string
        telemetry_disabled:
          type: boolean
      required:
        - workspace_id
        - account_type
        - enabled_features
        - workspace_slug
        - org_slug
        - telemetry_disabled
    AccessDetails:
      type: object
      properties:
        generation_allowed:
          type: boolean
        message:
          type: string
        level:
          type: string
          enum:
            - allowed
            - warning
            - blocked
      required:
        - generation_allowed
        - message
    Api:
      description: An Api is representation of a API (a collection of API Endpoints) within the Speakeasy Platform.
      properties:
        api_id:
          description: The ID of this Api. This is a human-readable name (subject to change).
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        description:
          description: A detailed description of the Api.
          type: string
        matched:
          description: Determines if all the endpoints within the Api are found in the OpenAPI spec associated with the Api.
          readOnly: true
          type: boolean
        meta_data:
          additionalProperties:
            items:
              type: string
            type: array
          description: A set of values associated with a meta_data key. This field is only set on get requests.
          type: object
        updated_at:
          description: Last update timestamp.
          format: date-time
          readOnly: true
          type: string
        version_id:
          description: The version ID of this Api. This is semantic version identifier.
          type: string
        workspace_id:
          description: The workspace ID this Api belongs to.
          readOnly: true
          type: string
      required:
        - api_id
        - created_at
        - description
        - updated_at
        - version_id
        - workspace_id
      type: object
    ApiEndpoint:
      description: An ApiEndpoint is a description of an Endpoint for an API.
      properties:
        api_endpoint_id:
          description: The ID of this ApiEndpoint. This is a hash of the method and path.
          type: string
        api_id:
          description: The ID of the Api this ApiEndpoint belongs to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        description:
          description: A detailed description of the ApiEndpoint.
          type: string
        display_name:
          description: A human-readable name for the ApiEndpoint.
          type: string
        matched:
          description: Determines if the endpoint was found in the OpenAPI spec associated with the parent Api.
          readOnly: true
          type: boolean
        method:
          description: HTTP verb.
          type: string
        path:
          description: Path that handles this Api.
          type: string
        updated_at:
          description: Last update timestamp.
          format: date-time
          readOnly: true
          type: string
        version_id:
          description: The version ID of the Api this ApiEndpoint belongs to.
          type: string
        workspace_id:
          description: The workspace ID this ApiEndpoint belongs to.
          readOnly: true
          type: string
      required:
        - api_endpoint_id
        - api_id
        - created_at
        - description
        - display_name
        - method
        - path
        - updated_at
        - version_id
        - workspace_id
      type: object
    BoundedRequest:
      description: A BoundedRequest is a request that has been logged by the Speakeasy without the contents of the request.
      properties:
        api_endpoint_id:
          description: The ID of the ApiEndpoint this request was made to.
          readOnly: true
          type: string
        api_id:
          description: The ID of the Api this request was made to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        customer_id:
          description: The ID of the customer that made this request.
          readOnly: true
          type: string
        latency:
          description: The latency of the request.
          readOnly: true
          type: integer
        method:
          description: HTTP verb.
          readOnly: true
          type: string
        path:
          description: The path of the request.
          readOnly: true
          type: string
        request_finish_time:
          description: The time the request finished.
          format: date-time
          readOnly: true
          type: string
        request_id:
          description: The ID of this request.
          readOnly: true
          type: string
        request_start_time:
          description: The time the request was made.
          format: date-time
          readOnly: true
          type: string
        status:
          description: The status code of the request.
          readOnly: true
          type: integer
        version_id:
          description: The version ID of the Api this request was made to.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this request was made to.
          readOnly: true
          type: string
        metadata:
          description: Metadata associated with this request
          readOnly: true
          items:
            $ref: "#/components/schemas/RequestMetadata"
          type: array
      required:
        - api_endpoint_id
        - api_id
        - created_at
        - customer_id
        - latency
        - method
        - path
        - request_finish_time
        - request_id
        - request_start_time
        - status
        - version_id
        - workspace_id
      type: object
    RequestMetadata:
      description: Key-Value pairs associated with a request
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    EmbedAccessTokenResponse:
      description: An EmbedAccessTokenResponse contains a token that can be used to embed a Speakeasy dashboard.
      properties:
        access_token:
          type: string
      required:
        - access_token
      type: object
    AccessToken:
      description: An AccessToken is a token that can be used to authenticate with the Speakeasy API.
      properties:
        access_token:
          type: string
        claims:
          type: object
        user:
          type: object
          properties:
            email:
              type: string
            id:
              type: string
            display_name:
              type: string
            admin:
              type: boolean
            created_at:
              type: string
              format: date-time
            email_verified:
              type: boolean
        workspaces:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              updated_at:
                type: string
                format: date-time
              account_type:
                type: string
                enum:
                  - free
                  - scale-up
                  - enterprise
        feature_flags:
          type: array
          items:
            $ref: "#/components/schemas/FeatureFlag"
      required:
        - access_token
        - claims
        - user
      type: object
    AddTags:
      description: Request body of tags to add to a revision
      properties:
        revision_digest:
          description: revision digest to add tags too sha256:...
          type: string
        tags:
          description: string tags to add to the revision
          items:
            type: string
          type: array
      required:
        - revision_digest
        - tags
      type: object
    EmbedToken:
      description: A representation of an embed token granted for working with Speakeasy components.
      properties:
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        created_by:
          description: The ID of the user that created this token.
          readOnly: true
          type: string
        description:
          description: A detailed description of the EmbedToken.
          type: string
        expires_at:
          description: The time this token expires.
          format: date-time
          readOnly: true
          type: string
        filters:
          description: The filters applied to this token.
          readOnly: true
          type: string
        id:
          description: The ID of this EmbedToken.
          readOnly: true
          type: string
        last_used:
          description: The last time this token was used.
          format: date-time
          readOnly: true
          type: string
        revoked_at:
          description: The time this token was revoked.
          format: date-time
          readOnly: true
          type: string
        revoked_by:
          description: The ID of the user that revoked this token.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this token belongs to.
          readOnly: true
          type: string
      required:
        - created_by
        - created_at
        - description
        - expires_at
        - filters
        - id
        - workspace_id
      type: object
    Error:
      description: The `Status` type defines a logical error model
      properties:
        message:
          description: A developer-facing error message.
          type: string
        status_code:
          description: The HTTP status code
          format: int32
          type: integer
      required:
        - message
        - status_code
      type: object
    FeatureFlag:
      description: A feature flag is a key-value pair that can be used to enable or disable features.
      properties:
        feature_flag:
          type: string
        trial_ends_at:
          type: string
          format: date-time
          nullable: true
      required:
        - feature_flag
    Filter:
      description: A filter is a key-value pair that can be used to filter a list of requests.
      properties:
        key:
          description: The key of the filter.
          type: string
        operator:
          description: The operator of the filter.
          type: string
        value:
          description: The value of the filter.
          type: string
      required:
        - key
        - value
        - operator
      type: object
    Filters:
      description: Filters are used to query requests.
      properties:
        filters:
          description: A list of filters to apply to the query.
          items:
            $ref: "#/components/schemas/Filter"
          type: array
        limit:
          description: The maximum number of results to return.
          type: integer
        offset:
          description: The offset to start the query from.
          type: integer
        operator:
          description: The operator to use when combining filters.
          type: string
      required:
        - filters
        - limit
        - offset
        - operator
      type: object
    GenerateOpenApiSpecDiff:
      properties:
        current_schema:
          type: string
        new_schema:
          type: string
      required:
        - current_schema
        - new_schema
      type: object
    Plugin:
      description: A plugin is a short script that is run against ingested requests
      properties:
        workspace_id:
          type: string
        plugin_id:
          type: string
        title:
          type: string
        code:
          type: string
        eval_hash:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - workspace_id
        - plugin_id
        - title
        - code
      type: object
    Organization:
      description: A speakeasy organization
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        account_type:
          type: string
          enum:
            - free
            - scale-up
            - enterprise
        telemetry_disabled:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - account_type
        - telemetry_disabled
      type: object
    OrganizationUsageResponse:
      description: A billing summary of organization usage
      type: object
      properties:
        usage:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationUsage"
        free_trial_expiry:
          format: date-time
          readOnly: true
          type: string
          description: Expiry date of the free trial, will be null if no trial
        total_allowed_languages:
          type: integer
          description: Total number of allowed languages, -1 if unlimited
        allowed_languages:
          type: array
          items:
            type: string
          description: List of allowed languages
      required:
        - usage
        - total_allowed_languages
        - allowed_languages
    OrganizationUsage:
      type: object
      properties:
        number_of_operations:
          type: integer
          description: Number of operations performed
        language:
          type: string
          description: The programming language used
        used_features:
          type: array
          items:
            type: string
          description: Features that have been used
        accessible_features:
          type: array
          items:
            type: string
          description: Features that are accessible
        accessible:
          type: boolean
          description: Indicates if the features are accessible
        workspaces:
          type: array
          items:
            type: string
          description: List of workspace IDs
        gen_lock_ids:
          type: array
          items:
            type: string
          description: List of generation lock IDs
      required:
        - number_of_operations
        - language
        - used_features
        - accessible_features
        - accessible
        - workspaces
        - gen_lock_ids
    Schema:
      description: A Schema represents an API schema for a particular Api and Version.
      properties:
        api_id:
          description: The ID of the Api this Schema belongs to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        description:
          description: A detailed description of the Schema.
          type: string
        revision_id:
          description: An ID referencing this particular revision of the Schema.
          type: string
        version_id:
          description: The version ID of the Api this Schema belongs to.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this Schema belongs to.
          readOnly: true
          type: string
      required:
        - api_id
        - created_at
        - description
        - revision_id
        - version_id
        - workspace_id
      type: object
    SchemaDiff:
      description: A SchemaDiff represents a diff of two Schemas.
      properties:
        additions:
          description: Holds every addition change in the diff.
          items:
            type: string
          type: array
        deletions:
          description: Holds every deletion change in the diff.
          items:
            type: string
          type: array
        modifications:
          additionalProperties:
            properties:
              From:
                description: Represents the previous value of the element.
                type: string
              To:
                description: Represents the current value of the element.
                type: string
            required:
              - From
              - To
            title: ValueChange
            type: object
          description: Holds every modification change in the diff.
          type: object
      required:
        - additions
        - deletions
        - modifications
      type: object
    UnboundedRequest:
      description: An UnboundedRequest represents the HAR content capture by Speakeasy when logging a request.
      properties:
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        har:
          description: The HAR content of the request.
          readOnly: true
          type: string
        har_size_bytes:
          description: The size of the HAR content in bytes.
          readOnly: true
          type: integer
        request_id:
          description: The ID of this request.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this request was made to.
          readOnly: true
          type: string
      required:
        - created_at
        - har
        - har_size_bytes
        - request_id
        - workspace_id
      type: object
    VersionMetadata:
      description: A set of keys and associated values, attached to a particular version of an Api.
      properties:
        api_id:
          description: The ID of the Api this Metadata belongs to.
          readOnly: true
          type: string
        created_at:
          description: Creation timestamp.
          format: date-time
          readOnly: true
          type: string
        meta_key:
          description: The key for this metadata.
          type: string
        meta_value:
          description: One of the values for this metadata.
          type: string
        version_id:
          description: The version ID of the Api this Metadata belongs to.
          readOnly: true
          type: string
        workspace_id:
          description: The workspace ID this Metadata belongs to.
          readOnly: true
          type: string
      required:
        - api_id
        - created_at
        - meta_key
        - meta_value
        - version_id
        - workspace_id
      type: object
    CliEventBatch:
      type: array
      items:
        $ref: "#/components/schemas/CliEvent"
      minItems: 1
    CliEvent:
      type: object
      required:
        - id
        - execution_id
        - workspace_id
        - speakeasy_api_key_name
        - interaction_type
        - local_started_at
        - created_at
        - speakeasy_version
        - success
      properties:
        id:
          type: string
          description: Unique identifier for each event.
        execution_id:
          type: string
          description: Unique identifier for each execution of the CLI.
        workspace_id:
          type: string
          description: Identifier of the workspace.
        speakeasy_api_key_name:
          type: string
          description: Identifier of the Speakeasy API key.
        interaction_type:
          $ref: "#/components/schemas/InteractionType"
          description: Type of interaction.
        local_started_at:
          type: string
          format: date-time
          description: Timestamp when the event started, in local time.
        local_completed_at:
          type: string
          format: date-time
          description: Timestamp when the event completed, in local time.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the event was created in the database.
        speakeasy_version:
          type: string
          description: Version of the Speakeasy CLI.
        success:
          type: boolean
          description: Indicates whether the event was successful.
        raw_command:
          type: string
          description: Full CLI command.
        duration_ms:
          type: integer
          description: Duration of the event in milliseconds.
        continuous_integration_environment:
          type: string
          description: Name of the CI environment.
        gh_action_run_link:
          type: string
          description: Link to the GitHub action run.
        gh_action_version:
          type: string
          description: Version of the GitHub action.
        gh_action_organization:
          type: string
          description: GitHub organization of the action.
        gh_action_ref:
          type: string
          description: GitHub Action ref value.
        gh_action_repository:
          type: string
          description: GitHub repository of the action.
        repo_label:
          type: string
          description: Label of the git repository.
        commit_head:
          type: string
          description: Remote commit ID.
        hostname:
          type: string
          description: Remote hostname.
        git_user_name:
          type: string
          description: User's name from git configuration. (not GitHub username)
        git_user_email:
          type: string
          description: User email from git configuration.
        git_remote_default_owner:
          type: string
          description: Default owner for git remote.
        git_remote_default_repo:
          type: string
          description: Default repository name for git remote.
        git_relative_cwd:
          type: string
          description: Current working directory relative to the git root.
        generate_target:
          type: string
          description: The target of the event.
        generate_target_name:
          type: string
          description: The workflow name of the target.
        generate_target_version:
          type: string
          description: The version of the target.
        generate_gen_lock_id:
          type: string
          description: gen.lock ID (expected to be a uuid).
        management_doc_checksum:
          type: string
          description: Checksum of the currently Rendered OpenAPI document.
        management_doc_version:
          type: string
          description: Version taken from info.version field of the Rendered OpenAPI document.
        generate_version:
          type: string
          description: Version of the generation logic used.
        generate_output_tests:
          type: boolean
          description: Indicates whether tests were output.
        generate_config_pre_raw:
          type: string
          description: Rendered configuration file (prior to generation)
        generate_config_post_raw:
          type: string
          description: Rendered configuration file (post generation)
        generate_config_pre_version:
          type: string
          description: The version of the customer's SDK before we generated
        generate_config_post_version:
          type: string
          description: The version of the customer's SDK that we just generated
        generate_config_pre_checksum:
          type: string
          description: Checksum of the configuration file (prior to generation)
        generate_config_post_checksum:
          type: string
          description: Checksum of the configuration file (post generation)
        generate_eligible_features:
          type: string
          description: Eligible feature set during generation
        generate_gen_lock_pre_features:
          type: string
          description: Features prior to generation
        generate_gen_lock_post_features:
          type: string
          description: Features post generation
        generate_gen_lock_pre_doc_version:
          type: string
          description: info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
        generate_gen_lock_pre_doc_checksum:
          type: string
          description: Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
        generate_gen_lock_pre_version:
          type: string
          description: Artifact version for the Previous Generation
        generate_gen_lock_pre_revision_digest:
          type: string
          description: Revision digest of the Previous Generation
        generate_gen_lock_pre_blob_digest:
          type: string
          description: Blob digest of the Previous Generation
        generate_gen_lock_pre_namespace_name:
          type: string
          description: Namespace name of the Previous Generation
        generate_bump_type:
          type: string
          description: Bump type of the lock file (calculated semver delta, or a custom change (manual release))
          enum:
            - major
            - minor
            - patch
            - custom
            - none
        generate_number_of_operations_ignored:
          type: integer
          description: The number of operations ignored in generation.
        generate_number_of_operations_used:
          type: integer
          description: The number of operations used in generation.
        generate_published:
          type: boolean
          description: Indicates whether the target was considered published.
        generate_repo_url:
          type: string
          description: Expected Repo URL, for use in documentation generation.
        publish_package_url:
          type: string
          description: URL of the published package.
        publish_package_name:
          type: string
          description: Name of the published package.
        publish_package_version:
          type: string
          description: Version of the published package.
        publish_package_registry_name:
          type: string
          description: Name of the registry where the package was published.
        source_revision_digest:
          type: string
          description: The revision digest of the source.
        source_blob_digest:
          type: string
          description: The blob digest of the source.
        source_namespace_name:
          type: string
          description: The namespace name of the source.
        lint_report_digest:
          type: string
          description: The checksum of the lint report.
        lint_report_error_count:
          type: integer
          description: The number of errors in the lint report.
        lint_report_warning_count:
          type: integer
          description: The number of warnings in the lint report.
        lint_report_info_count:
          type: integer
          description: The number of info messages in the lint report.
        openapi_diff_report_digest:
          type: string
          description: The checksum of the openapi diff report.
        openapi_diff_base_source_revision_digest:
          type: string
          description: The revision digest of the base source.
        openapi_diff_base_source_blob_digest:
          type: string
          description: The blob digest of the base source.
        openapi_diff_base_source_namespace_name:
          type: string
          description: The namespace name of the base source.
        openapi_diff_breaking_changes_count:
          type: integer
          description: The number of breaking changes in the openapi diff report.
        openapi_diff_bump_type:
          type: string
          description: Bump type of the lock file (calculated semver delta, or a custom change (manual release))
          enum:
            - major
            - minor
            - patch
            - none
        error:
          type: string
          description: Error message if the event was not successful.
        mermaid_diagram:
          type: string
          description: Mermaid diagram
        last_step:
          type: string
          description: The last step of the event.
        workflow_pre_raw:
          type: string
          description: Workflow file (prior to execution)
        workflow_post_raw:
          type: string
          description: Workflow file (post execution)
        workflow_lock_pre_raw:
          type: string
          description: Workflow lock file (prior to execution)
        workflow_lock_post_raw:
          type: string
          description: Workflow lock file (post execution)
    InteractionType:
      type: string
      description: Type of interaction.
      enum:
        - CI_EXEC
        - CLI_EXEC
        - LINT
        - OPENAPI_DIFF
        - TARGET_GENERATE
        - TOMBSTONE
        - AUTHENTICATE
        - QUICKSTART
        - RUN
        - CONFIGURE
        - PUBLISH
    TargetSDKList:
      type: array
      items:
        $ref: "#/components/schemas/TargetSDK"
      minItems: 1
    TargetSDK:
      type: object
      required:
        - id
        - generate_target
        - generate_gen_lock_id
        - last_event_id
        - last_event_created_at
        - last_event_interaction_type
      properties:
        id:
          type: string
          description: Unique identifier of the target the same as `generate_gen_lock_id`
        last_event_id:
          type: string
          description: Unique identifier of the last event for the target
        last_event_created_at:
          type: string
          format: date-time
          description: Timestamp when the event was created in the database.
        last_event_interaction_type:
          $ref: "#/components/schemas/InteractionType"
          description: Type of interaction.
        success:
          type: boolean
          description: Indicates whether the event was successful.
        commit_head:
          type: string
          description: Remote commit ID.
        git_remote_default_owner:
          type: string
          description: Default owner for git remote.
        git_remote_default_repo:
          type: string
          description: Default repository name for git remote.
        git_relative_cwd:
          type: string
          description: Current working directory relative to the git root.
        generate_target:
          type: string
          description: eg `typescript`, `terraform`, `python`
        generate_target_name:
          type: string
          description: The workflow name of the target.
        generate_gen_lock_id:
          type: string
          description: gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
        generate_target_version:
          type: string
          description: The version of the Speakeasy generator for this target eg v2 of the typescript generator.
        generate_config_post_version:
          type: string
          description: Version of the generated target (post generation)
        generate_gen_lock_pre_features:
          type: string
          description: Features prior to generation
        generate_gen_lock_pre_version:
          type: string
          description: Artifact version for the Previous Generation
        generate_eligible_features:
          type: string
          description: Eligible feature set during generation
        generate_number_of_operations_ignored:
          type: integer
          description: The number of operations ignored in generation.
        generate_number_of_operations_used:
          type: integer
          description: The number of operations used in generation.
        generate_published:
          type: boolean
          description: Indicates whether the target was considered published.
        continuous_integration_environment:
          type: string
          description: Name of the CI environment.
        gh_action_ref:
          type: string
          description: GitHub Action ref value.
        gh_action_run_link:
          type: string
          description: Link to the GitHub action run.
        gh_action_version:
          type: string
          description: Version of the GitHub action.
        gh_action_organization:
          type: string
          description: GitHub organization of the action.
        gh_action_repository:
          type: string
          description: GitHub repository of the action.
        repo_label:
          type: string
          description: Label of the git repository.
        hostname:
          type: string
          description: Remote hostname.
        git_user_name:
          type: string
          description: User's name from git configuration. (not GitHub username)
        git_user_email:
          type: string
          description: User email from git configuration.
        source_revision_digest:
          type: string
          description: The revision digest of the source.
        source_blob_digest:
          type: string
          description: The blob digest of the source.
        source_namespace_name:
          type: string
          description: The namespace name of the source.
        error:
          type: string
          description: Error message if the last event was not successful.
        workflow_pre_raw:
          type: string
          description: Workflow file (prior to execution)
        workflow_post_raw:
          type: string
          description: Workflow file (post execution)
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user.
        email:
          type: string
          description: Email address of the user.
        email_verified:
          type: boolean
          description: Indicates whether the email address has been verified.
        github_handle:
          type: string
          description: GitHub handle of the user.
        display_name:
          type: string
          description: Display name of the user.
        photo_url:
          type: string
          description: URL of the user's photo.
        default_workspace_id:
          type: string
          description: Identifier of the default workspace.
        confirmed:
          type: boolean
          description: Indicates whether the user has been confirmed.
        whitelisted:
          type: boolean
          description: Indicates whether the user has been whitelisted.
        last_login_at:
          type: string
          format: date-time
          description: Timestamp of the last login.
        admin:
          type: boolean
          description: Indicates whether the user is an admin.
        created_at:
          type: string
          format: date-time
          description: Timestamp of the user's creation.
        updated_at:
          type: string
          format: date-time
          description: Timestamp of the user's last update.
      required:
        - id
        - email
        - email_verified
        - display_name
        - confirmed
        - whitelisted
        - last_login_at
        - admin
        - created_at
        - updated_at
    Report:
      type: object
      properties:
        type:
          type: string
          enum:
            - linting
            - changes
    SuggestOperationIDsOpts:
      type: object
      properties:
        style:
          type: string
          enum:
            - standardize
            - resource
        depth_style:
          type: string
          enum:
            - original
            - flat
            - nested
            - deep
    SuggestedOperationIDs:
      type: object
      title: suggestion
      properties:
        operation_ids:
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - operation_ids
    OASInfo:
      type: object
      properties:
        title:
          type: string
        summary:
          type: string
        description:
          type: string
        version:
          type: string
        license:
          type: object
          properties:
            identifier:
              type: string
      required:
        - title
        - summary
        - description
        - version
        - license
    OASOperation:
      type: object
      properties:
        method:
          type: string
        path:
          type: string
        operation_id:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
      required:
        - method
        - path
        - operation_id
        - description
        - tags
    OASSummary:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/OASInfo'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/OASOperation'
      required:
        - info
        - operations
    ShortURL:
      type: object
      properties:
        short_url:
          type: string
        full_url:
          type: string
      required:
        - short_url
        - full_url
  securitySchemes:
    APIKey:
      description: The API Key for the workspace
      in: header
      name: x-api-key
      type: apiKey
    Bearer:
      description: The Bearer token for the workspace
      type: http
      scheme: bearer
